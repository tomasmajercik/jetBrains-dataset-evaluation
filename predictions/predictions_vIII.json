[
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start",
      "suffix": " \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n        {\n            $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n            $fileName = $_POST[\"fileName\"];\n\n            \n            $query = \"DELETE FROM `tags` WHERE file_name='$fileName' AND username='$username'\";\n            if(mysqli_query($connection, $query))\n            {\n                echo json_encode([\"success\" => true]);\n            }\n            else{\n                echo json_encode([\"success\" => false]);\n            }\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n        ",
      "real_middle": "();\n\n    $connection = mysqli_connect(\"localhost\",",
      "generated_middle": "();\n\n    $connection = mysqli_connect(\"localhost\",",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) \n    {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"token\"])) \n    {\n        $token = mysqli_real_escape_string($connection, $_P",
      "suffix": "E `token` = '$token'\";\n        $result = mysqli_query($connection, $query);\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $row = mysqli_fetch_assoc($result);\n            $username = $row[\"username\"];\n\n            $fileQuery = \"SELECT * FROM `user_files` WHERE `username` = '$username'\";\n            $filesResult = mysqli_query($connection, $fileQuery);\n\n            $files = [];\n            while ($file = mysqli_fetch_assoc($filesResult))\n            {\n                $files[] = $file;\n            }\n\n            echo json_encode([\"success\" => true, \"username\" => $username, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid token\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "OST[\"token\"]);\n\n        $query = \"SELECT * FROM `users` WHER",
      "generated_middle": "OST[\"token\"]);\n\n        $query = \"SELECT * FROM `users` WHER",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) \n    {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"token\"])) \n    {\n        $token = mysqli_real_escape_string($connection, $_POST[\"token\"]);\n\n        $query = \"SELECT * FROM `users` WHERE `token` = '$token'\";\n        $result = mysqli_query($connection, $query);\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $row = mysqli_fetch_assoc($result);\n            $username = $row[\"username\"];\n\n            $fileQuery = \"SELECT * FROM `user_files` WHERE `username` = '$username'\";\n            $filesResult = mysqli_query($connection, $fileQuery);\n\n            $files",
      "suffix": "        $files[] = $file;\n            }\n\n            echo json_encode([\"success\" => true, \"username\" => $username, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid token\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": " = [];\n            while ($file = mysqli_fetch_assoc($filesResult))\n            {\n        ",
      "generated_middle": "= [];\n\n            while ($file = mysqli_fetch_assoc($filesResult)) \n            {",
      "exact_match": false,
      "chrf": 100.0,
      "levenshtein_distance": 2
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) \n    {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"token\"])) \n    {\n        $token = mysqli_real_escape_string($connection, $_POST[\"token\"]);\n\n        $query = \"SELECT * FROM `users` WHERE `token` = '$token'\";\n        $result = mysqli_query($connection, $query);\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $row = mysqli_fetch_assoc($result);\n            $username = $row[\"username\"];\n\n            $fileQuery = \"SELECT * FROM `user_files` WHERE `username` = '$username'\";\n            $filesResult = mysqli_query($connection, $fileQuery);\n\n            $files = [];\n            whil",
      "suffix": ";\n            }\n\n            echo json_encode([\"success\" => true, \"username\" => $username, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid token\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "e ($file = mysqli_fetch_assoc($filesResult))\n            {\n                $files[] = $file",
      "generated_middle": "e ($row = mysqli_fetch_assoc($filesResult)) \n            {\n                $files[] = $row[\"filename\"]",
      "exact_match": false,
      "chrf": 81.51145439295681,
      "levenshtein_distance": 16
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) \n    {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"token\"])) \n    {\n        $token = mysqli_real_escape_string($connection, $_POST[\"token\"]);\n\n        $query = \"SELECT * FROM `users` WHERE `token` = '$token'\";\n        $result = mysqli_query($connection, $query);\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $row = mysqli_fetch_assoc($result);\n            $username = $row[\"username\"];\n\n            $fileQue",
      "suffix": "name` = '$username'\";\n            $filesResult = mysqli_query($connection, $fileQuery);\n\n            $files = [];\n            while ($file = mysqli_fetch_assoc($filesResult))\n            {\n                $files[] = $file;\n            }\n\n            echo json_encode([\"success\" => true, \"username\" => $username, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid token\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "ry = \"SELECT * FROM `user_files` WHERE `user",
      "generated_middle": "ry = \"SELECT * FROM `files` WHERE `user",
      "exact_match": false,
      "chrf": 80.2861074509568,
      "levenshtein_distance": 5
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"username\"])) \n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        \n        $query = \"SELECT `ta",
      "suffix": "result = mysqli_query($connection, $query);\n        \n        if (mysqli_num_rows($result) > 0) \n        {\n            $tags = [];\n            while ($row = mysqli_fetch_assoc($result)) \n            {\n                $tags[] = $row[\"tag\"];\n            }\n            echo json_encode([\"success\" => true, \"tags\" => $tags]);\n        } else {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "g` FROM `tags` WHERE `username` = '$username'\";\n        $",
      "generated_middle": "g` FROM `tags` WHERE `fileName` = '$fileName'\";\n        $",
      "exact_match": false,
      "chrf": 62.37266202285458,
      "levenshtein_distance": 10
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"]",
      "suffix": "name\"]);\n            $oldName = $_POST[\"oldName\"];\n            $newName = $_POST[\"newName\"];\n        \n            $query = \"UPDATE user_files SET file_name='$newName' WHERE file_name='$oldName' AND username='$username'\";\n            if(mysqli_query($connection, $query))\n            {\n                echo json_encode([\"success\" => true]);\n            }\n            else{\n                echo json_encode([\"success\" => false]);\n            }\n        \n        } else {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n",
      "real_middle": " == \"POST\")\n        {\n            $username = mysqli_real_escape_string($connection, $_POST[\"user",
      "generated_middle": "== \"POST\") \n        {\n            $username = mysqli_real_escape_string($connection, $_SESSION[\"user",
      "exact_match": false,
      "chrf": 89.97679210616761,
      "levenshtein_distance": 7
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n        {\n            $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n            $oldName = $_POST[\"oldName\"];\n            $newName = $_POST[\"newName\"];\n        \n            $query = \"UPDATE user_files SET file_name='$newName' WHERE file_name='$oldName' AND username='$username'\";\n            if(mysqli_query($connection, $query))\n            {\n                e",
      "suffix": "               echo json_encode([\"success\" => false]);\n            }\n        \n        } else {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n",
      "real_middle": "cho json_encode([\"success\" => true]);\n            }\n            else{\n ",
      "generated_middle": "cho json_encode([\"success\" => true]);\n            } else {",
      "exact_match": false,
      "chrf": 100.0,
      "levenshtein_distance": 13
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n        {\n            $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n            $fileName = $_POST[\"fileName\"];\n\n            \n            $query = \"SELECT `file_path` FROM `user_files` WHERE file_name='$fileName' AND username='$username'\";\n            $result = mysqli_query($connection, $query);\n        \n            if ($result) {\n                $row = mysqli_fetch_assoc($result);\n                $filePath = $row['file_path'];\n                \n                $deleteQuery = \"DELETE FROM `user_files` WHERE file_name='$fileName' AND username='$username'\";\n                \n                if (mysqli_query($connection,",
      "suffix": "                {\n                        if (unlink($filePath)) \n                        {\n                            echo json_encode([\"success\" => true]);\n                        }\n                        else \n                        {\n                            echo json_encode([\"success\" => false, \"message\" => \"Failed to delete the file from the filesystem\"]);\n                        }\n                    } \n                    else \n                    {\n                        echo json_encode([\"success\" => false, \"message\" => \"File does not exist on the server\"]);\n                    }\n                } \n                else \n                {\n                    echo json_encode([\"success\" => false, \"message\" => \"Failed to delete file from the database\"]);\n                }\n            } \n            else \n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to fetch file path from the database\"]);\n            }\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n        ",
      "real_middle": " $deleteQuery)) \n                {\n                    if (file_exists($filePath)) \n    ",
      "generated_middle": "$deleteQuery))",
      "exact_match": false,
      "chrf": 34.5932868799493,
      "levenshtein_distance": 67
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\")",
      "suffix": "t-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $tag = mysqli_real_escape_string($connection, $_POST[\"tag\"]);\n\n        $fileQuery = \"SELECT file_name FROM `tags` WHERE `tag` = '$tag'\";\n        $filesResult = mysqli_query($connection, $fileQuery);\n\n        if ($filesResult) \n        {\n            $files = [];\n            while ($row = mysqli_fetch_assoc($filesResult)) \n            {\n                $files[] = $row[\"file_name\"];\n            }\n            echo json_encode([\"success\" => true, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } \n    else \n    {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n\n    mysqli_close($connection);\n?>\n",
      "real_middle": ";\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Conten",
      "generated_middle": ";\n    header(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\");\n    header(\"Access-Control-Allow-Methods: GET, POST, PUT, DELETE\");\n    header(\"Conten",
      "exact_match": false,
      "chrf": 72.02747826848649,
      "levenshtein_distance": 102
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $tag = mysqli_real_escape_string($connection, $_POST[\"tag\"]);\n\n        $fileQuery = \"SELECT file_name FROM `tags` WHERE `tag` = '$tag'\";\n        $filesResult = mysqli_query($connection, $fileQuery);\n\n        if ($file",
      "suffix": "e ($row = mysqli_fetch_assoc($filesResult)) \n            {\n                $files[] = $row[\"file_name\"];\n            }\n            echo json_encode([\"success\" => true, \"files\" => $files]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } \n    else \n    {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n\n    mysqli_close($connection);\n?>\n",
      "real_middle": "sResult) \n        {\n            $files = [];\n            whil",
      "generated_middle": "sResult) \n        {\n            $files = [];\n            whil",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $tag = mysqli_real_escape_string($connection, $_POST[\"tag\"]);\n\n        $fileQuery = \"SELECT file_name FROM `tags` WHERE `tag` = '$tag'\";\n        $filesResult = mysqli_query($connection, $fileQuery);\n\n        if ($filesResult) \n        {\n            $files = [];\n            while ($row = mysqli_fetch_assoc($filesResult)) \n            {\n                $files[] = $row[\"file_name\"];\n            }\n            e",
      "suffix": "        {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } \n    else \n    {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n\n    mysqli_close($connection);\n?>\n",
      "real_middle": "cho json_encode([\"success\" => true, \"files\" => $files]);\n        } \n        else \n",
      "generated_middle": "cho json_encode([\"success\" => true, \"files\" => $files]);\n        } \n        else",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if(mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => \"Failed to connect to MySQL: \" . mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $name = mysqli_real_escape_string($connection, $_POST[\"name\"]);\n        $password = mysqli_real_escape_string($connection, $_POST[\"password\"]);\n        $email = mysqli_real_escape_string($connection, $_POST[\"email\"]);\n\n       // Check if the username or email already exists\n       ",
      "suffix": "        $checkResult = mysqli_query($connection, $checkQuery);\n\n        if (mysqli_num_rows($checkResult) > 0) \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Username or email already exists\"]);\n        } \n        else \n        {\n            $query = \"INSERT INTO `users` (username, email, password, token) VALUES ('$name', '$email', '$password', '')\";\n\n            $result = mysqli_query($connection, $query);\n\n            if ($result) \n            {\n                echo json_encode([\"success\" => true]);\n            } \n            else \n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to register user: \" . mysqli_error($connection)]);\n            }\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request method\"]);\n    }\n\n    mysqli_close($connection);\n?>\n",
      "real_middle": "checkQuery = \"SELECT * FROM `users` WHERE `username` = '$name' OR `email` = '$email'\";\n  $",
      "generated_middle": "$checkQuery = \"SELECT * FROM `users` WHERE username = '$name' OR email = '$email'\";",
      "exact_match": false,
      "chrf": 79.89747387805987,
      "levenshtein_distance": 9
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if(mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => \"Failed to connect to MySQL: \" . mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $name = mysqli_real_escape_string($connection, $_POST[\"name\"]);\n        $password = mysqli_real_escape_string($connection, $_POST[\"password\"]);\n        $email = mysqli_real_escape_string($connection, $_POST[\"email\"]);\n\n        // Check if the username or email already exists\n        $checkQuery = \"SELECT * FROM `users` WHERE `username` = '$name' OR `email` = '$email'\";\n        $checkResult = mysqli_query($connection, $checkQuery);\n\n        if (mysqli_num_rows($checkResult) > 0) \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Username or email already exists\"]);\n        } \n        else \n        {\n            $query = \"INSERT INTO `users` (username, email, password, token) VALUES ('$name', '$email', '$password', '')\";\n\n            $result = mysqli_query($connectio",
      "suffix": "   {\n                echo json_encode([\"success\" => true]);\n            } \n            else \n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to register user: \" . mysqli_error($connection)]);\n            }\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request method\"]);\n    }\n\n    mysqli_close($connection);\n?>\n",
      "real_middle": "n, $query);\n\n            if ($result) \n         ",
      "generated_middle": "n, $query);\n\n            if ($result)",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Login from \"./pages/login\"\nimport Dashboard from './pages/dashboard';\n\nimport { createBrowserRouter, RouterProvider, Route } from 'react-router-dom';\n\nconst router = createBrowserRouter([\n\n  {\n    path: \"/\",\n    element: <Login/>,\n  },\n  {\n    path: \"/login\",\n    element: <Login/>,\n  },\n  {\n    path: \"/dashboard\",\n    element: <Dashboard/>,\n  },\n\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMo",
      "suffix": "// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
      "real_middle": "de>\n  //   <App />\n  // </React.StrictMode>\n  <RouterProvider router={router}/>\n);\n\n",
      "generated_middle": "de>\n  <RouterProvider router={router}>\n    <Route path=\"/\" element={<App />} />\n  </RouterProvider>\n  // </React.StrictMode>\n);",
      "exact_match": false,
      "chrf": 77.20061833823792,
      "levenshtein_distance": 85
    },
    {
      "prefix": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Login from \"./pages/login\"\nimport Dashboard from './pages/dashboard';\n\nimport { createBrowserRouter, RouterProvider, Route } from 'react-router-dom';\n\nconst router = createBrowserRouter([\n\n  {\n    path: \"/\",\n    element: <Login/>,\n  },\n  {\n    path: \"/login\",\n    element: <Login/>,\n  },\n  {\n    path: \"/dashboard\",\n    element: <Dashboard/>,\n  },\n\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot",
      "suffix": "act.StrictMode>\n  <RouterProvider router={router}/>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
      "real_middle": ".render(\n  // <React.StrictMode>\n  //   <App />\n  // </Re",
      "generated_middle": ".render(\n<Re",
      "exact_match": false,
      "chrf": 19.16492924714224,
      "levenshtein_distance": 45
    },
    {
      "prefix": "import React, { useRef, useState, useEffect } from 'react';\nimport $, { event } from 'jquery';\nimport \"./dragNdrop.scss\";\n\nexport default function DragNdrop({ token, username, updateFilesList }) \n{\n    const inputRef = useRef();\n    const [files, setFiles] = useState(null);\n    const [animation, setAnimation] = useState(false);\n    const [dragCounter, setDragCounter] = useState(0);\n    const [showForm, setShowForm] = useState(false);\n    const [showFormCounter, setshowFormCounter] = useState(0);\n\n    const handleDragOver = (event) => \n    {\n        event.preventDefault();\n    };\n\n\n    //animation when drag file is over\n    const handleDragEnter = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev + 1);\n        if (!animation) setAnimation(true);\n    };\n    const handleDragLeave = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev - 1);\n    };\n    useEffect(() => \n    {\n        if (dragCounter === 0) {\n            setAnimation(false);\n        }\n    }, [dragCounter]);\n\n    useEffect(() => \n    {\n        if(showFormCounter === 0)\n        {\n            setShowForm(false);\n        }\n    }, [showFormCounter]);\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setFiles(event.dataTransfer.files);\n        setDragCounter(0);\n        setAnimation(false);\n    };\n    //\n\n\n    const handleUpload = () => {\n        const formData = new FormData();\n        Array.from(files).map(file => {\n            formData.append('file[]', file);\n        });\n        formData.append('token', token);\n        formData.append('username', username);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n            data: formData,\n            contentType: false,\n            processData: false,\n\n            success(data) {\n                if (data.success) {\n                    updateFilesList(Array.from(files).map(file => ({\n                        file_name: file.name,\n                        file_path: `storage/${file.name}`\n                    })));\n                    setFiles(null);\n                } else {\n                    console.error('File upload error:', data.message);\n                }\n            },\n            error(xhr, status, error) {\n                console.error('AJAX error:', status, error);\n            }\n        });\n    };\n\n\n\n    if (files) {\n        return (\n            <div className=\"uploads\">\n                <ul>\n                    {Array.from(files).map((file, idx) => <li key={idx}>{file.name}</li>)}\n                </ul>\n                <div className=\"actions\">\n                    <button className='dragNdropBtn cancelButton' onClick={() => setFiles(null)}>Cancel</button>\n                    <button className='dragNdropBtn' onClick={handleUpload}>Upload</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <>\n        <div \n            className={`dropzone ${animation ? \"animate\" : \"\"}`}\n            onDragOver={handleDragOver}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n        >\n          { animation ? \n          (\n            <h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drop Files to Upload</h1>\n          ) : (<h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drag, hold and Drop Files to Upload</h1>\n\n          )\n\n          }\n          <h1 className={`${animation ? \"fontGone\" : \"\"}`}>Or</h1>\n          <input \n            type=\"file\"\n            multiple\n            onChange={(event) => setFiles(event.target.files)}\n            hidden\n            ref={inputRef}\n            className={`${animation ? \"fontGone\" : \"\"}`}\n          />\n          <button className={`dra",
      "suffix": " Files</button>\n        </div>\n\n\n        \n     \n\n        </>\n    );\n}",
      "real_middle": "gNdropBtn ${animation ? \"fontGone\" : \"\"}`} onClick={() => inputRef.current.click()}>Select",
      "generated_middle": "gNdropBtn ${animation? \"animate\" : \"\"}`} onClick={() => {\n            inputRef.current.click();\n            setshowFormCounter(prev => prev + 1);\n            setShowForm(true);\n          }}>Select",
      "exact_match": false,
      "chrf": 73.10719564769227,
      "levenshtein_distance": 115
    },
    {
      "prefix": "import React, { useRef, useState, useEffect } from 'react';\nimport $, { event } from 'jquery';\nimport \"./dragNdrop.scss\";\n\nexport default function DragNdrop({ token, username, updateFilesList }) \n{\n    const inputRef = useRef();\n    const [files, setFiles] = useState(null);\n    const [animation, setAnimat",
      "suffix": "ounter, setDragCounter] = useState(0);\n    const [showForm, setShowForm] = useState(false);\n    const [showFormCounter, setshowFormCounter] = useState(0);\n\n    const handleDragOver = (event) => \n    {\n        event.preventDefault();\n    };\n\n\n    //animation when drag file is over\n    const handleDragEnter = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev + 1);\n        if (!animation) setAnimation(true);\n    };\n    const handleDragLeave = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev - 1);\n    };\n    useEffect(() => \n    {\n        if (dragCounter === 0) {\n            setAnimation(false);\n        }\n    }, [dragCounter]);\n\n    useEffect(() => \n    {\n        if(showFormCounter === 0)\n        {\n            setShowForm(false);\n        }\n    }, [showFormCounter]);\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setFiles(event.dataTransfer.files);\n        setDragCounter(0);\n        setAnimation(false);\n    };\n    //\n\n\n    const handleUpload = () => {\n        const formData = new FormData();\n        Array.from(files).map(file => {\n            formData.append('file[]', file);\n        });\n        formData.append('token', token);\n        formData.append('username', username);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n            data: formData,\n            contentType: false,\n            processData: false,\n\n            success(data) {\n                if (data.success) {\n                    updateFilesList(Array.from(files).map(file => ({\n                        file_name: file.name,\n                        file_path: `storage/${file.name}`\n                    })));\n                    setFiles(null);\n                } else {\n                    console.error('File upload error:', data.message);\n                }\n            },\n            error(xhr, status, error) {\n                console.error('AJAX error:', status, error);\n            }\n        });\n    };\n\n\n\n    if (files) {\n        return (\n            <div className=\"uploads\">\n                <ul>\n                    {Array.from(files).map((file, idx) => <li key={idx}>{file.name}</li>)}\n                </ul>\n                <div className=\"actions\">\n                    <button className='dragNdropBtn cancelButton' onClick={() => setFiles(null)}>Cancel</button>\n                    <button className='dragNdropBtn' onClick={handleUpload}>Upload</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <>\n        <div \n            className={`dropzone ${animation ? \"animate\" : \"\"}`}\n            onDragOver={handleDragOver}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n        >\n          { animation ? \n          (\n            <h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drop Files to Upload</h1>\n          ) : (<h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drag, hold and Drop Files to Upload</h1>\n\n          )\n\n          }\n          <h1 className={`${animation ? \"fontGone\" : \"\"}`}>Or</h1>\n          <input \n            type=\"file\"\n            multiple\n            onChange={(event) => setFiles(event.target.files)}\n            hidden\n            ref={inputRef}\n            className={`${animation ? \"fontGone\" : \"\"}`}\n          />\n          <button className={`dragNdropBtn ${animation ? \"fontGone\" : \"\"}`} onClick={() => inputRef.current.click()}>Select Files</button>\n        </div>\n\n\n        \n     \n\n        </>\n    );\n}",
      "real_middle": "ion] = useState(false);\n    const [dragC",
      "generated_middle": "ion] = useState(false);\n    const [dragC",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useRef, useState, useEffect } from 'react';\nimport $, { event } from 'jquery';\nimport \"./dragNdrop.scss\";\n\nexport default function DragNdrop({ token, username, updateFilesList }) \n{\n    const inputRef = useRef();\n    const [files, setFiles] = useState(null);\n    const [animation, setAnimation] = useState(false);\n    const [dragCounter, setDragCounter] = useState(0);\n    const [showForm, setShowForm] = useState(",
      "suffix": "dleDragOver = (event) => \n    {\n        event.preventDefault();\n    };\n\n\n    //animation when drag file is over\n    const handleDragEnter = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev + 1);\n        if (!animation) setAnimation(true);\n    };\n    const handleDragLeave = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev - 1);\n    };\n    useEffect(() => \n    {\n        if (dragCounter === 0) {\n            setAnimation(false);\n        }\n    }, [dragCounter]);\n\n    useEffect(() => \n    {\n        if(showFormCounter === 0)\n        {\n            setShowForm(false);\n        }\n    }, [showFormCounter]);\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setFiles(event.dataTransfer.files);\n        setDragCounter(0);\n        setAnimation(false);\n    };\n    //\n\n\n    const handleUpload = () => {\n        const formData = new FormData();\n        Array.from(files).map(file => {\n            formData.append('file[]', file);\n        });\n        formData.append('token', token);\n        formData.append('username', username);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n            data: formData,\n            contentType: false,\n            processData: false,\n\n            success(data) {\n                if (data.success) {\n                    updateFilesList(Array.from(files).map(file => ({\n                        file_name: file.name,\n                        file_path: `storage/${file.name}`\n                    })));\n                    setFiles(null);\n                } else {\n                    console.error('File upload error:', data.message);\n                }\n            },\n            error(xhr, status, error) {\n                console.error('AJAX error:', status, error);\n            }\n        });\n    };\n\n\n\n    if (files) {\n        return (\n            <div className=\"uploads\">\n                <ul>\n                    {Array.from(files).map((file, idx) => <li key={idx}>{file.name}</li>)}\n                </ul>\n                <div className=\"actions\">\n                    <button className='dragNdropBtn cancelButton' onClick={() => setFiles(null)}>Cancel</button>\n                    <button className='dragNdropBtn' onClick={handleUpload}>Upload</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <>\n        <div \n            className={`dropzone ${animation ? \"animate\" : \"\"}`}\n            onDragOver={handleDragOver}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n        >\n          { animation ? \n          (\n            <h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drop Files to Upload</h1>\n          ) : (<h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drag, hold and Drop Files to Upload</h1>\n\n          )\n\n          }\n          <h1 className={`${animation ? \"fontGone\" : \"\"}`}>Or</h1>\n          <input \n            type=\"file\"\n            multiple\n            onChange={(event) => setFiles(event.target.files)}\n            hidden\n            ref={inputRef}\n            className={`${animation ? \"fontGone\" : \"\"}`}\n          />\n          <button className={`dragNdropBtn ${animation ? \"fontGone\" : \"\"}`} onClick={() => inputRef.current.click()}>Select Files</button>\n        </div>\n\n\n        \n     \n\n        </>\n    );\n}",
      "real_middle": "false);\n    const [showFormCounter, setshowFormCounter] = useState(0);\n\n    const han",
      "generated_middle": "false);\n    const [showFormCounter, setShowFormCounter] = useState(0);\n\n    const handleShowForm = () => \n    {\n        setShowForm(true);\n        setShowFormCounter(prev => prev + 1);\n    };\n\n    const",
      "exact_match": false,
      "chrf": 77.44836427482518,
      "levenshtein_distance": 118
    },
    {
      "prefix": "import React, { useRef, useState, useEffect } from 'react';\nimport $, { event } from 'jquery';\nimport \"./dragNdrop.scss\";\n\nexport default function DragNdrop({ token, username, updateFilesList }) \n{\n    const inputRef = useRef();\n    const [files, setFiles] = useState(null);\n    const [animation, setAnimation] = useState(false);\n    const [dragCounter, setDragCounter] = useState(0);\n    const [showForm, setShowForm] = useState(false);\n    const [showFormCounter, setshowFormCounter] = useState(0);\n\n    const handleDragOver = (event) => \n    {\n        event.preventDefault();\n    };\n\n\n    //animation when drag file is over\n    const handleDragEnter = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev + 1);\n        if (!animation) setAnimation(true);\n    };\n    const handleDragLeave = (event) => \n    {\n        event.preventDefault();\n        setDragCounter(prev => prev - 1);\n    };\n    useEffect(() => \n    {\n        if (dragCounter === 0) {\n            setAnimation(false);\n        }\n    }, [dragCounter]);\n\n    useEffect(() => \n    {\n        if(showFormCounter === 0)\n        {\n            setShowForm(false);\n        }\n    }, [showFormCounter]);\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        setFiles(event.dataTransfer.files);\n        setDragCounter(0);\n        setAnimation(false);\n    };\n    //\n\n\n    const handleUpload = () => {\n        const formData = new FormData();\n        Array.from(files).map(file => {\n            formData.append('file[]', file);\n        });\n        formData.append('token', token)",
      "suffix": "{\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n            data: formData,\n            contentType: false,\n            processData: false,\n\n            success(data) {\n                if (data.success) {\n                    updateFilesList(Array.from(files).map(file => ({\n                        file_name: file.name,\n                        file_path: `storage/${file.name}`\n                    })));\n                    setFiles(null);\n                } else {\n                    console.error('File upload error:', data.message);\n                }\n            },\n            error(xhr, status, error) {\n                console.error('AJAX error:', status, error);\n            }\n        });\n    };\n\n\n\n    if (files) {\n        return (\n            <div className=\"uploads\">\n                <ul>\n                    {Array.from(files).map((file, idx) => <li key={idx}>{file.name}</li>)}\n                </ul>\n                <div className=\"actions\">\n                    <button className='dragNdropBtn cancelButton' onClick={() => setFiles(null)}>Cancel</button>\n                    <button className='dragNdropBtn' onClick={handleUpload}>Upload</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <>\n        <div \n            className={`dropzone ${animation ? \"animate\" : \"\"}`}\n            onDragOver={handleDragOver}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n        >\n          { animation ? \n          (\n            <h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drop Files to Upload</h1>\n          ) : (<h1 className={`${animation ? \"animateFont\" : \"\"}`}>Drag, hold and Drop Files to Upload</h1>\n\n          )\n\n          }\n          <h1 className={`${animation ? \"fontGone\" : \"\"}`}>Or</h1>\n          <input \n            type=\"file\"\n            multiple\n            onChange={(event) => setFiles(event.target.files)}\n            hidden\n            ref={inputRef}\n            className={`${animation ? \"fontGone\" : \"\"}`}\n          />\n          <button className={`dragNdropBtn ${animation ? \"fontGone\" : \"\"}`} onClick={() => inputRef.current.click()}>Select Files</button>\n        </div>\n\n\n        \n     \n\n        </>\n    );\n}",
      "real_middle": ";\n        formData.append('username', username);\n\n        $.ajax(",
      "generated_middle": ";\n        $.ajax(",
      "exact_match": false,
      "chrf": 15.50411393782787,
      "levenshtein_distance": 48
    },
    {
      "prefix": "<?php\n    header(\"Acces",
      "suffix": "(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        $tags = json_decode($_POST[\"tags\"], true);\n\n        //delete things so it can overwrite\n        $deleteQuery = \"DELETE FROM tags WHERE username = '$username' AND file_name = '$fileName'\";\n        if (!mysqli_query($connection, $deleteQuery)) \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Failed to delete existing tags\"]);\n            die();\n        }\n        // insert (new) data\n        foreach ($tags as $tag) \n        {\n            $tag = mysqli_real_escape_string($connection, $tag);\n            $insertQuery = \"INSERT INTO tags (file_name, username, tag) VALUES ('$fileName', '$username', '$tag')\";\n            if (!mysqli_query($connection, $insertQuery))\n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to insert new tag: $tag\"]);\n                die();\n            }\n        }\n    }\n\n\n?>",
      "real_middle": "s-Control-Allow-Origin: http://localhost:3000\");\n    header",
      "generated_middle": "s-Control-Allow-Origin: *\");\n    header",
      "exact_match": false,
      "chrf": 57.875830637787274,
      "levenshtein_distance": 21
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        $tags = json_decode($_POST[\"tags\"], true);\n\n        //delete things so it can overwrite\n        $deleteQuery = \"DELETE FROM tags WHERE username = '$username' AND file_name = '$fileName'\";\n        if (!mysqli_query($connection, $deleteQuery)) \n        {\n            echo json_encode([\"success\" => false, \"message\" => \"Failed to delete existing tags\"]);\n            die();\n        }\n        // insert (new) data\n        foreach ($tags as $tag) \n        {\n            $tag = mysqli_real_escape_string($connection, $tag);\n            $insertQuery = \"INSERT INTO tags (file_name, username, tag) VAL",
      "suffix": "Query))\n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to insert new tag: $tag\"]);\n                die();\n            }\n        }\n    }\n\n\n?>",
      "real_middle": "UES ('$fileName', '$username', '$tag')\";\n            if (!mysqli_query($connection, $insert",
      "generated_middle": "UES ('$fileName', '$username', '$tag')\";\n            if (!mysqli_query($connection, $insert",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        $tags = json_decode($_POST[\"tags\"], true);\n\n        //delete things so it can overwrite\n        $deleteQuery = \"DELETE FROM tags WHERE username = '$username' AND file_name = '$fileName'\";\n        i",
      "suffix": " false, \"message\" => \"Failed to delete existing tags\"]);\n            die();\n        }\n        // insert (new) data\n        foreach ($tags as $tag) \n        {\n            $tag = mysqli_real_escape_string($connection, $tag);\n            $insertQuery = \"INSERT INTO tags (file_name, username, tag) VALUES ('$fileName', '$username', '$tag')\";\n            if (!mysqli_query($connection, $insertQuery))\n            {\n                echo json_encode([\"success\" => false, \"message\" => \"Failed to insert new tag: $tag\"]);\n                die();\n            }\n        }\n    }\n\n\n?>",
      "real_middle": "f (!mysqli_query($connection, $deleteQuery)) \n        {\n            echo json_encode([\"success\" =>",
      "generated_middle": "f (!mysqli_query($connection, $deleteQuery))\n        {\n            echo json_encode([\"success\" =>",
      "exact_match": false,
      "chrf": 100.0,
      "levenshtein_distance": 1
    },
    {
      "prefix": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './login.scss';\nimport $, { error } from \"jquery\";\n\n\n\nexport default function Login() \n{\n  const navigate = useNavigate();\n  // variables\n  const [isLoggedIn, setLoggedIn] = useState(true);\n\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const [errorMessage,setErrorMessage] = useState(\"\");\n\n  const [result, setResult] = useState(\"\");\n\n  //functions\n  const handleNameChange = (ev) =>\n  {\n    setName(ev.target.value);\n  }\n  const handlePasswordChange = (ev) =>\n  {\n    setPassword(ev.target.value); \n  }\n  const handleEmailChange = (ev) =>\n  {\n    setEmail(ev.target.value); \n  }\n\n  const handleSubmit = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: form.attr(\"action\"),\n      data: form.serialize(),\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n            setErrorMes",
      "suffix": "  sessionStorage.setItem('token', data.token);\n            navigate('/dashboard');\n        }\n        else\n        {\n          setErrorMessage(\"incorrect username or password\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      }\n    });\n\n  }\n\n  const handleRegister = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/register.php',\n      data: {name, password, email},\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n          setErrorMessage(\"\");\n          setLoggedIn(true);\n        }\n        else\n        {\n          setErrorMessage(\"user already exist\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      },\n    })\n  }\n\n\n  const toggleForm = () => \n  {\n    setLoggedIn(!isLoggedIn);\n  };\n\n  // layout\n  return(\n    <>\n      <h1>\n        Documents\n      </h1>\n\n      <div className=\"form_container\">\n        {isLoggedIn ? \n        (\n           <div className='login_form'>\n            <h1>Login now!</h1>\n            <form action='http://localhost/webologyTaskPHP/backend/data.php' method='post' onSubmit={(event) => handleSubmit(event)}>\n              <input className='nameInput' type='text' id='name' name='name' placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='passwordInput' type='password' id='password' name='password' placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch' >Don't have an account? <strong className='redirect_bttn' onClick={toggleForm}>Register here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        ) : (\n          <div className='register_form'>\n            <h1>Register now!</h1>\n            <form method='post' onSubmit={(event) => handleRegister(event)}>\n              <input className='nameInput' type='text' id='name' name='name' required placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='nameInput' type='email' id='email' name='email' required placeholder='email' value={email} onChange={(event) => handleEmailChange(event)}/>\n              <br/>\n              <input className='nameInput' type='password' id='name' name='password' required placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch'>Already have an account? <strong className='redirect_bttn' onClick={toggleForm}>Login here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        )}\n      </div>\n\n\n\n\n    </>\n  );\n}",
      "real_middle": "sage(\"\");\n            sessionStorage.setItem('isAuthenticated', 'true');\n          ",
      "generated_middle": "sage(\"\");",
      "exact_match": false,
      "chrf": 14.124373896987313,
      "levenshtein_distance": 63
    },
    {
      "prefix": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './login.scss';\nimport $, { error } from \"jquery\";\n\n\n\nexport default function Login() \n{\n  const navigate = useNavigate();\n  // variables\n  const [isLoggedIn, setLoggedIn] = useState(true);\n\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const [errorMessage,setErrorMessage] = useState(\"\");\n\n  const [result, setResult] = useState(\"\");\n\n  //functions\n  const handleNameChange = (ev) =>\n  {\n    setName(ev.target.value);\n  }\n  const handlePasswordChange = (ev) =>\n  {\n    setPassword(ev.target.value); \n  }\n  const handleEmailChange = (ev) =>\n  {\n    setEmail(ev.target.value); \n  }\n\n  const handleSubmit = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: form.attr(\"action\"),\n      data: form.serialize(),\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n            setErrorMessage(\"\");\n            sessionStorage.setItem('isAuthenticated', 'true');\n            sessionStorage.setItem('token', data.token);\n            navigate('/dashboard');\n        }\n        else\n        {\n          setErrorMessage(\"incorrect username or password\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      }\n    });\n\n  }\n\n  const handleRegister = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form ",
      "suffix": "      url: 'http://localhost/webologyTaskPHP/backend/register.php',\n      data: {name, password, email},\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n          setErrorMessage(\"\");\n          setLoggedIn(true);\n        }\n        else\n        {\n          setErrorMessage(\"user already exist\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      },\n    })\n  }\n\n\n  const toggleForm = () => \n  {\n    setLoggedIn(!isLoggedIn);\n  };\n\n  // layout\n  return(\n    <>\n      <h1>\n        Documents\n      </h1>\n\n      <div className=\"form_container\">\n        {isLoggedIn ? \n        (\n           <div className='login_form'>\n            <h1>Login now!</h1>\n            <form action='http://localhost/webologyTaskPHP/backend/data.php' method='post' onSubmit={(event) => handleSubmit(event)}>\n              <input className='nameInput' type='text' id='name' name='name' placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='passwordInput' type='password' id='password' name='password' placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch' >Don't have an account? <strong className='redirect_bttn' onClick={toggleForm}>Register here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        ) : (\n          <div className='register_form'>\n            <h1>Register now!</h1>\n            <form method='post' onSubmit={(event) => handleRegister(event)}>\n              <input className='nameInput' type='text' id='name' name='name' required placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='nameInput' type='email' id='email' name='email' required placeholder='email' value={email} onChange={(event) => handleEmailChange(event)}/>\n              <br/>\n              <input className='nameInput' type='password' id='name' name='password' required placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch'>Already have an account? <strong className='redirect_bttn' onClick={toggleForm}>Login here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        )}\n      </div>\n\n\n\n\n    </>\n  );\n}",
      "real_middle": "= $(ev.target);\n    $.ajax({\n      type: \"POST\",\n",
      "generated_middle": "= $(ev.target);\n    $.ajax({\n      type: \"POST\",",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './login.scss';\nimport $, { error } from \"jquery\";\n\n\n\nexport default function Login() \n",
      "suffix": "// variables\n  const [isLoggedIn, setLoggedIn] = useState(true);\n\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const [errorMessage,setErrorMessage] = useState(\"\");\n\n  const [result, setResult] = useState(\"\");\n\n  //functions\n  const handleNameChange = (ev) =>\n  {\n    setName(ev.target.value);\n  }\n  const handlePasswordChange = (ev) =>\n  {\n    setPassword(ev.target.value); \n  }\n  const handleEmailChange = (ev) =>\n  {\n    setEmail(ev.target.value); \n  }\n\n  const handleSubmit = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: form.attr(\"action\"),\n      data: form.serialize(),\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n            setErrorMessage(\"\");\n            sessionStorage.setItem('isAuthenticated', 'true');\n            sessionStorage.setItem('token', data.token);\n            navigate('/dashboard');\n        }\n        else\n        {\n          setErrorMessage(\"incorrect username or password\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      }\n    });\n\n  }\n\n  const handleRegister = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/register.php',\n      data: {name, password, email},\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n          setErrorMessage(\"\");\n          setLoggedIn(true);\n        }\n        else\n        {\n          setErrorMessage(\"user already exist\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      },\n    })\n  }\n\n\n  const toggleForm = () => \n  {\n    setLoggedIn(!isLoggedIn);\n  };\n\n  // layout\n  return(\n    <>\n      <h1>\n        Documents\n      </h1>\n\n      <div className=\"form_container\">\n        {isLoggedIn ? \n        (\n           <div className='login_form'>\n            <h1>Login now!</h1>\n            <form action='http://localhost/webologyTaskPHP/backend/data.php' method='post' onSubmit={(event) => handleSubmit(event)}>\n              <input className='nameInput' type='text' id='name' name='name' placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='passwordInput' type='password' id='password' name='password' placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch' >Don't have an account? <strong className='redirect_bttn' onClick={toggleForm}>Register here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        ) : (\n          <div className='register_form'>\n            <h1>Register now!</h1>\n            <form method='post' onSubmit={(event) => handleRegister(event)}>\n              <input className='nameInput' type='text' id='name' name='name' required placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='nameInput' type='email' id='email' name='email' required placeholder='email' value={email} onChange={(event) => handleEmailChange(event)}/>\n              <br/>\n              <input className='nameInput' type='password' id='name' name='password' required placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch'>Already have an account? <strong className='redirect_bttn' onClick={toggleForm}>Login here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        )}\n      </div>\n\n\n\n\n    </>\n  );\n}",
      "real_middle": "{\n  const navigate = useNavigate();\n  ",
      "generated_middle": "{\n  const navigate = useNavigate();",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './login.scss';\nimport $, { error } from \"jquery\";\n\n\n\nexport default function Login() \n{\n  const navigate = useNavigate();\n  // variables\n  const [isLoggedIn, setLoggedIn] = useState(true);\n\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const [errorMessage,setErrorMessage] = useState(\"\");\n\n  const [result, setResult] = useState(\"\");\n\n  //functions\n  const handleNameChange = (ev) =>\n  {\n    setName(ev.target.value);\n  }\n  const handlePasswordChange = (ev) =>\n  {\n    setPassword(ev.target.value); \n  }\n  const handleEmailChange = (ev) =>\n  {\n    setEmail(ev.target.value); \n  }\n\n  const handleSubmit = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: form.attr(\"action\"),\n      data: form.serialize(),\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n            setErrorMessage(\"\");\n            sessionStorage.setItem('isAuthenticated', 'true');\n            sessionStorage.setItem('token', data.token);\n            navigate('/dashboard');\n        }\n        else\n        {\n          setErrorMessage(\"incorrect username or password\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      }\n    });\n\n  }\n\n  const handleRegister = (ev) =>\n  {\n    ev.preventDefault();\n\n    const form = $(ev.target);\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/register.php',\n      data: {name, password, email},\n      success(data)\n      {\n        setResult(data);\n        if(data.success)\n        {\n          setErrorMessage(\"\");\n          setLoggedIn(true);\n        }\n        else\n        {\n          setErrorMessage(\"user already exist\");\n          setResult(\"We run into a problem: '\" + data.message + \"' sorry\")\n        }\n      },\n    })\n  }\n\n\n  const toggleForm = () => \n  {\n    setLoggedIn(!isLoggedIn);\n  };\n\n  // layout\n  return(\n    <>\n      <h1>\n        Documents\n      </h1>\n\n      <div className=\"form_container\">\n        {isLoggedIn ? \n        (\n           <div className='login_form'>\n            <h1>Login now!</h1>\n            <form action='http://localhost/webologyTaskPHP/backend/data.php' method='post' onSubmit={(event) => handleSubmit(event)}>\n              <input className='nameInput' type='text' id='name' name='name' placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='passwordInput' type='password' id='password' name='password' placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch' >Don't have an account? <strong className='redirect_bttn' onClick={toggleForm}>Register here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n      ",
      "suffix": "egister_form'>\n            <h1>Register now!</h1>\n            <form method='post' onSubmit={(event) => handleRegister(event)}>\n              <input className='nameInput' type='text' id='name' name='name' required placeholder='name' value={name} onChange={(event) => handleNameChange(event)}/>\n              <br/>\n              <input className='nameInput' type='email' id='email' name='email' required placeholder='email' value={email} onChange={(event) => handleEmailChange(event)}/>\n              <br/>\n              <input className='nameInput' type='password' id='name' name='password' required placeholder='password' value={password} onChange={(event) => handlePasswordChange(event)}/>\n              <br/>\n              <p className='switch'>Already have an account? <strong className='redirect_bttn' onClick={toggleForm}>Login here</strong></p>\n              <p className='error'>{errorMessage}</p>\n              <button className='submitBtn' type='submit'>Submit!</button>\n            </form>\n          </div>\n        )}\n      </div>\n\n\n\n\n    </>\n  );\n}",
      "real_middle": "      </form>\n          </div>\n        ) : (\n          <div className='r",
      "generated_middle": "</form>\n          </div>\n        ) : (\n          <div className='r",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && !empty($_FILES[\"file\"])) {\n            $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n            $files = $_FILES[\"file\"];\n            $fileCount = count($files[\"name\"]);\n        \n            $responses = [];\n        \n            if (!is_dir(\"storage\")) {\n                mkdir(\"storage\");\n            }\n        \n            for ($i = 0; $i < $fileCount; $i++) {\n                $fileName = basename($files[\"name\"][$i]);\n                $filePath = \"storage/\" . $fileName;\n        \n                // Check if the file has been uploaded correctly\n                if ($files['error'][$i] !== UPLOAD_ERR_OK) {\n                    $responses[] = [\"file\" => $fileName, \"success\" => false, \"message\" => \"File upload error: \" . $files['error'][$i]];\n                    continue;\n                }\n        \n                if (!is_writable(\"storage\")) {\n                    echo json_encode([\"success\" => false, \"message\" => \"Storage directory is not writable\"]);\n                    exit;\n                }\n        \n     ",
      "suffix": "$i], $filePath)) {\n                    $query = \"INSERT INTO `user_files` (username, file_name, file_path) VALUES ('$username', '$fileName', '$filePath')\";\n                    if (mysqli_query($connection, $query)) {\n                        $responses[] = [\"file\" => $fileName, \"success\" => true, \"message\" => \"File uploaded successfully!\"];\n                    } else {\n                        $responses[] = [\"file\" => $fileName, \"success\" => false, \"message\" => \"Failed to save file information to the database\"];\n                    }\n                } else {\n                    $responses[] = [\"file\" => $fileName, \"success\" => false, \"message\" => \"Failed to move uploaded file\"];\n                }\n            }\n        \n            echo json_encode([\"success\" => true, \"responses\" => $responses]);\n        } else {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n",
      "real_middle": "           if (move_uploaded_file($files[\"tmp_name\"][",
      "generated_middle": "if (move_uploaded_file($files[\"tmp_name\"][",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n    \n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\"); \n    \n    if(mysqli_connect_error())\n    {\n        echo mysqli_connect_error();\n        die();\n    }\n        \n    function generateToken() // Simple token g",
      "suffix": "m_bytes(16)); \n    }\n\n    //chenk if the post was submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $name = mysqli_real_escape_string($connection, $_POST[\"name\"]);\n        $password = mysqli_real_escape_string($connection, $_POST[\"password\"]);\n\n        $query = \"SELECT * FROM `users` WHERE `username` = '$name' AND `password` = '$password'\";\n        $result = mysqli_query($connection, $query);\n        $token = generateToken();\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $query = \"UPDATE `users` SET `token` = '$token' WHERE `username` = '$name' AND `password` = '$password'\";\n            mysqli_query($connection, $query);\n            echo json_encode([\"success\" => true, \"token\" => $token]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false]);\n        }\n    }\n    else\n    {\n        echo json_encode([\"success\" => false]);\n    }\n\n\n\n?>\n",
      "real_middle": "eneration\n    {\n        return bin2hex(rando",
      "generated_middle": "enerator\n    {\n        return bin2hex(openssl_se",
      "exact_match": false,
      "chrf": 60.28882358824126,
      "levenshtein_distance": 11
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n    \n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\"); \n    \n    if(mysqli_connect_error())\n    {\n        echo mysqli_connect_error();\n        die();\n    }\n        \n    function generateToken() // Simple token generation\n    {\n        return bin2hex(random_bytes(16)); \n    }\n\n    //chenk if the post was submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") \n    {\n        $name = mysqli_real_escape_string($connection, $_POST[\"name\"]);\n        $password = mysqli_real_escape_string($connection, $_POST[\"password\"]);\n\n  ",
      "suffix": " `password` = '$password'\";\n        $result = mysqli_query($connection, $query);\n        $token = generateToken();\n\n        if (mysqli_num_rows($result) > 0) \n        {\n            $query = \"UPDATE `users` SET `token` = '$token' WHERE `username` = '$name' AND `password` = '$password'\";\n            mysqli_query($connection, $query);\n            echo json_encode([\"success\" => true, \"token\" => $token]);\n        } \n        else \n        {\n            echo json_encode([\"success\" => false]);\n        }\n    }\n    else\n    {\n        echo json_encode([\"success\" => false]);\n    }\n\n\n\n?>\n",
      "real_middle": "      $query = \"SELECT * FROM `users` WHERE `username` = '$name' AND",
      "generated_middle": "$query = \"SELECT * FROM `users` WHERE `username` = '$name' AND",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset",
      "suffix": "ername = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        \n        $query = \"SELECT `tag` FROM `tags` WHERE `username` = '$username' AND `file_name` = '$fileName'\";\n        $result = mysqli_query($connection, $query);\n        \n        if (mysqli_num_rows($result) > 0) \n        {\n            $tags = [];\n            while ($row = mysqli_fetch_assoc($result)) \n            {\n                $tags[] = $row[\"tag\"];\n            }\n            echo json_encode([\"success\" => true, \"tags\" => $tags]);\n        }\n        else {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "($_POST[\"username\"])) \n    {\n        $us",
      "generated_middle": "($_POST[\"username\"]) && isset($_POST[\"fileName\"])) {\n        $us",
      "exact_match": false,
      "chrf": 80.60416312004789,
      "levenshtein_distance": 29
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://loca",
      "suffix": "ype: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    if (mysqli_connect_error()) {\n        echo json_encode([\"success\" => false, \"message\" => mysqli_connect_error()]);\n        die();\n    }\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST[\"username\"])) \n    {\n        $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n        $fileName = mysqli_real_escape_string($connection, $_POST[\"fileName\"]);\n        \n        $query = \"SELECT `tag` FROM `tags` WHERE `username` = '$username' AND `file_name` = '$fileName'\";\n        $result = mysqli_query($connection, $query);\n        \n        if (mysqli_num_rows($result) > 0) \n        {\n            $tags = [];\n            while ($row = mysqli_fetch_assoc($result)) \n            {\n                $tags[] = $row[\"tag\"];\n            }\n            echo json_encode([\"success\" => true, \"tags\" => $tags]);\n        }\n        else {\n            echo json_encode([\"success\" => false, \"message\" => \"Error retrieving tags\"]);\n        }\n    } else {\n        echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n    }\n?>\n",
      "real_middle": "lhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-T",
      "generated_middle": "lhost\");\n    header(\"Content-T",
      "exact_match": false,
      "chrf": 29.266389066603658,
      "levenshtein_distance": 63
    },
    {
      "prefix": "<?php\n    header(\"Access-Control-Allow-Origin: http://localhost:3000\");\n    header(\"Access-Control-Allow-Headers: Content-Type\");\n    header(\"Content-Type: application/json; charset=UTF-8\");\n    session_start();\n\n    $connection = mysqli_connect(\"localhost\", \"root\", \"\", \"webologyTask\");\n\n    \n        if (mysqli_connect_error()) \n        {\n            error_log(\"Connection failed: \" . mysqli_connect_error());\n            echo json_encode([\"success\" => false, \"message\" => \"Database connection failed\"]);\n            die();\n        }\n\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")\n        {\n            $username = mysqli_real_escape_string($connection, $_POST[\"username\"]);\n            $oldName =",
      "suffix": "ame = $_POST[\"newName\"];\n        \n            $query = \"UPDATE tags SET file_name='$newName' WHERE file_name='$oldName' AND username='$username'\";\n        \n            if (mysqli_query($connection, $query))\n            {\n                $response[\"success\"] = true;\n            } \n            else \n            {\n                $response[\"message\"] = \"Failed to update file name in database\";\n            }\n        \n        } else {\n            echo json_encode([\"success\" => false, \"message\" => \"Invalid request\"]);\n        }\n?>\n",
      "real_middle": " $_POST[\"oldName\"];\n            $newN",
      "generated_middle": "$_POST[\"oldName\"];\n            $newN",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "// imports\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport $ from 'jquery';\nimport './dashboard.scss';\n\n// components\nimport DragNdrop from \"../components/DragNdrop\";\nimport Modal from '../components/Modal';\nimport YesNoModal from '../components/YesNoModal';\nimport Filter from '../components/filter';\n\n\n//images\nimport downloadIcon from '../imgs/downloadIcon.png';\nimport renameIcon from '../imgs/renameIco.png';\nimport deleteIcon from '../imgs/deleteIco.png';\nimport tagIcon from '../imgs/tagIco.png';\nimport filerIcon from '../imgs/filteIco.png';\n\n\nexport default function Dashboard() \n{\n  const isAuthenticated = sessionStorage.getItem('isAuthenticated') === 'true';\n  const token = sessionStorage.getItem('token');\n\n  const [username, setUsername] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const [filter, setFilter] = useState(false);\n  const [filtredFiles, setFiltredFiles] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n\n  const [files, setFiles] = useState([]);\n  const [file, setFile] = useState(null);\n  const inputRef = useRef();\n\n  const [renamingFile, setRenamingFile] = useState(null);\n  const [newFileName, setNewFileName] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  \n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deletingFile, setDeletingFile] = useState(null);\n\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [toBeTaggedFile, setToBeTaggedFile] = useState(false);\n  const [userTags, setUserTags] = useState([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [refreshTags, setrefreshTags] = useState(false);\n  const [currentSelectTags, setCurrentSelectTags] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated && token) \n    {\n      $.ajax({\n        type: \"POST\",\n        url: 'http://localhost/webologyTaskPHP/backend/getUserInfo.php',\n        data: {token},\n        success(data) \n        {\n          setResult(data);\n          if (data.success)\n          {\n            setUsername(data.username);\n            setFiles(data.files || []);\n          }\n          else\n          {\n            console.error('Failed to fetch user info:', data.message);\n          }\n        },\n        error(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n        }\n      });\n    }\n  }, [isAuthenticated, token]);\n\n  const handleFileChange = (event) => \n  {\n    setFile(event.target.files[0]);\n  };\n\n  const handleFileUpload = () =>\n  {\n    if(file)\n    {\n      const formData = new FormData;\n      formData.append('file', file);\n      formData.append('token', token);\n      formData.append('username', username);\n\n      $.ajax({\n\n          type: \"POST\",\n          url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n          data: formData,\n          contentType: false,\n          processData: false,\n\n          success(data) {\n            if (data.success) \n            {\n              setFiles([...files, { file_name: file.name, file_path: `storage/${file.name}` }]);\n              setFile(null);\n            } \n            else \n            {\n              console.error('File upload error:', data.message);\n            }\n          },\n          error(xhr, status, error) {\n            console.error('AJAX error:', status, error);\n          }\n\n      });\n\n    }\n  }\n\n  const updateFilesList = (newFiles) => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  //preventing files from downloading and not downloading\n  const downloadFile = (path) =>\n  {\n    const fileName = path;\n    console.log(fileName);\n    const aTag = document.createElement(\"a\");\n    aTag.href = path;\n    aTag.setAttribute(\"download\", fileName);\n    document.body.appendChild(aTag);\n    aTag.click();\n    aTag.remove();\n  }\n  //\n\n  // rename file\n  const renameFile = (fileName) =>\n  {\n    setRenamingFile(fileName);\n    setNewFileName(fileName);\n    setShowModal(true);\n  }\n  const handleRenameSave = (newName) =>\n  {\n    console.log(\"Renaming file:\", renamingFile, \"to\", newName);\n    setShowModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/renameFile.php',\n      data: { oldName: renamingFile, newName: newName, username },\n      success: function(data) {\n          if (data.success) {\n              setFiles(files.map(file =>\n                  file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n              setFiltredFiles(filtredFiles.map(file =>\n                file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n          } else {\n              console.error('Failed to rename file:', data.message);\n          }\n      },\n      error: function(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n          console.log(\"Response Text:\", xhr.responseText);\n      }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: 'http://localhost/webologyTaskPHP/backend/renameFileTags.php',\n    data: { oldName: renamingFile, newName: newName, username },\n    success: function(data) {\n        if (data.success) {\n          setFiltredFiles(filtredFiles.map(file =>\n            file.file_name === renamingFile ? { ...file, file_name: newName } : file\n          ));\n        } else {\n            console.error('Failed to rename file:', data.message);\n        }\n    },\n});\n  }\n  /**/\n  //deleteFile\n  const deleteFile = (fileName) => \n  {\n    setDeletingFile(fileName);\n    setShowDeleteModal(true);\n  }\n  const handleDelete = () => \n  {\n    console.log(\"Deleting file:\", deletingFile);\n    setShowDeleteModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFile.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(files.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFileTags.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(filtredFiles.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n  /**/\n  // tagging \n  const updateTags = (fileName) =>\n  {\n    pullFreshTags(fileName);\n    setShowTagModal(true);\n    setToBeTaggedFile(fileName);\n  }  \n  const handleTagToggle = (tag) => \n  {\n    if (userTags.includes(tag)) {\n        setUserTags(userTags.filter(t => t !== tag));\n    } else {\n        setUserTags([...userTags, tag]);\n    }\n  };\n  const handleTagInputChange = (event) => \n  {\n    setNewTag(event.target.value);\n  };\n  const handleAddTag = (tagName) =>\n  {\n    if (newTag && !userTags.includes(tagName)) \n    {\n      setUserTags([...userTags, newTag]);\n      setNewTag(\"\");\n    }\n  } \n  const onClose = () =>\n  {\n    setShowTagModal(false);\n  }\n  const handleSave = () => {\n    setShowTagModal(false);\n  \n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/updateTags.php',\n      data: { username: username, fileName: toBeTaggedFile, tags: JSON.stringify(userTags) },\n      success: function(data) {\n        console.log(\"Server Response:\", data);\n        if (data.success) {\n          setFiles(files.map(file =>\n            file.file_name === toBeTaggedFile ? { ...file, tags: userTags } : file\n          ));\n\n          if(!refreshTags)\n            setrefreshTags(true);\n          else\n            setrefreshTags(false);\n\n        } else {\n          console.error('Failed to update tags:', data.message);\n        }\n      },\n      error: function(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n        console.log(\"Response Text:\", xhr.responseText);\n      }\n    });\n  }\n  const pullFreshTags = (fileName) =>\n  {\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/getFileTags.php',\n      data: { username: username, fileName: fileName },\n      success(data) \n      {\n        if (data.success) \n        {\n          setUserTags(data.tags || []);\n        } \n        else \n        {\n          setUserTags([]);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n\n  // filter\n  const startFilter = () => \n  {\n    setShowFilterModal(true);\n    if(!refreshTags)\n      setrefreshTags(true);\n    else\n      setrefreshTags(false);\n  }\n  const showFiltredData = (tags) => {\n    if (tags.length > 0) \n    {\n      setCurrentSelectTags(tags);\n      setFilter(true);\n      setFiltredFiles([]);\n      tags.forEach(tag => {\n          $.ajax({\n              type: \"POST\",\n              url: 'http://localhost/webologyTaskPHP/backend/getFilteredFiles.php',\n              data: { username, tag },\n              success: function(data) \n              {\n                  if (data.success) \n                  {\n                    setFiltredFiles(prevFiles => [...prevFiles, ...data.files.map(file => ({ file_name: file }))]);\n                  } \n                  else \n                  {\n                      console.error('Error retrieving filtered files:', data.message);\n                  }\n              },\n              error: function(xhr, status, error) {\n                  console.error('AJAX error:', status, error);\n              }\n          });\n      });\n      setShowFilterModal(false);\n    } \n    else \n    {\n      setCurrentSelectTags([]);\n      setShowFilterModal(false);\n      setFilter(false);\n      setFiltredFiles([]);\n    }\n};\n  /**/\n\n  if (!isAuthenticated) \n  {\n    return <Navigate to=\"/login\"/>;\n  }\n\n  // layout\n  return(\n    <>\n\n      <div className='header'>\n        <h1>Hello <strong> {username} </strong>, welcome to your dashboard!</h1>\n      </div>\n      \n      <div className='filesBrowser'>\n        <h2>Your files: </h2>\n\n        <DragNdrop token={token} username={username} updateFilesList={updateFilesList} />\n\n        <div className='documentList'>\n          <div className='filterSpace'>\n\n            {\n            currentSelectTags.length > 0 ? (\n              <h3 className='caption'>showing files inluding tags: {\n                currentSelectTags.map((currentSelectTag, index) => (<span className='currentSelectTag' key={index}> {currentSelectTag}</span>) )}</h3>)\n                :\n                <h3>(no filter)</h3>\n              \n            }\n            <button className='filter' onClick={startFilter}> <img src={filerIcon} alt=\"Delete\" /> </button>\n          </div>\n          <table>\n            <thead>\n              <tr className='tableHeader'>\n                <th>File Name</th>\n                <th className='actionLine'>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {files.length === 0 ? (\n                <tr>\n                  <td colSpan=\"2\">No files</td>\n                </tr>\n              ) : (\n\n                filter ?\n                filtredFiles.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n\n                  </tr>\n\n                ))\n                :\n                files.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n                  </tr>\n                ))\n\n\n              )}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleRenameSave}\n        newFileName={newFileName}\n        setNewFileName={setNewFileName}\n        oldFileName={renamingFile}\n      />\n\n      <YesNoModal\n        show={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onSave={handleDelete}\n        fileName={deletingFile}\n      />\n      <Filter\n        show={showFilterModal}\n        onClose={() => setShowFilterModal(false)}\n        onSave={showFiltredData}\n        username = {username}\n        refresh = {refreshTags}\n      />\n\n      {showTagModal && (\n\n        // pullFreshTags(toBeTaggedFile),\n\n        <div className='overlay'>\n          <div className=\"modal\">\n            <h4>Update Tags for file \"{toBeTaggedFile}\"</h4>\n            {/*checkboxes*/}\n            <div className=\"tags-list\">\n                {userTags.map((tag, index) => (\n                  <div key={index} className=\"tag-item checkBoxes\">\n                    <input\n                      ",
      "suffix": "pe=\"checkbox\"\n                      checked={userTags.includes(tag)}\n                      onChange={() => handleTagToggle(tag)}\n                    />\n                    <span>{tag}</span>\n                  </div>\n                ))}\n            </div>\n            {/*add tag*/}\n            <div className=\"add-tag\">\n              <input\n                className='input'\n                type=\"text\"\n                value={newTag}\n                onChange={handleTagInputChange}\n                placeholder=\"Enter new tag\"\n                onKeyUp={(e) => e.key === 'Enter' && handleAddTag()}\n              />\n              <button className='addButton' onClick={handleAddTag}>Add Tag</button>\n            </div>\n            {/*functional buttons*/}\n            <div className=\"modal-actions\">\n              <button className='cancelButton' onClick={onClose}>Cancel</button>\n              <button onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n\n      )}\n\n    </>\n  \n\n  );\n}",
      "real_middle": "className=\"checkBox\"\n                      ty",
      "generated_middle": "ty",
      "exact_match": false,
      "chrf": 8.510638297872338,
      "levenshtein_distance": 43
    },
    {
      "prefix": "// imports\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport $ from 'jquery';\nimport './dashboard.scss';\n\n// components\nimport DragNdrop from \"../components/DragNdrop\";\nimport Modal from '../components/Modal';\nimport YesNoModal from '../components/YesNoModal';\nimport Filter from '../components/filter';\n\n\n//images\nimport downloadIcon from '../imgs/downloadIcon.png';\nimport renameIcon from '../imgs/renameIco.png';\nimport deleteIcon from '../imgs/deleteIco.png';\nimport tagIcon from '../imgs/tagIco.png';\nimport filerIcon from '../imgs/filteIco.png';\n\n\nexport default function Dashboard() \n{\n  const isAuthenticated = sessionStorage.getItem('isAuthenticated') === 'true';\n  const token = sessionStorage.getItem('token');\n\n  const [username, setUsername] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const [filter, setFilter] = useState(false);\n  const [filtredFiles, setFiltredFiles] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n\n  const [files, setFiles] = useState([]);\n  const [file, setFile] = useState(null);\n  const inputRef = useRef();\n\n  const [renamingFile, setRenamingFile] = useState(null);\n  const [newFileName, setNewFileName] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  \n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deletingFile, setDeletingFile] = useState(null);\n\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [toBeTaggedFile, setToBeTaggedFile] = useState(false);\n  const [userTags, setUserTags] = useState([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [refreshTags, setrefreshTags] = useState(false);\n  const [currentSelectTags, setCurrentSelectTags] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated && token) \n    {\n      $.ajax({\n        type: \"POST\",\n        url: 'http://localhost/webologyTaskPHP/backend/getUserInfo.php',\n        data: {token},\n        success(data) \n        {\n          setResult(data);\n          if (data.success)\n          {\n            setUsername(data.username);\n            setFiles(data.files || []);\n          }\n          else\n          {\n            console.error('Failed to fetch user info:', data.message);\n          }\n        },\n        error(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n        }\n      });\n    }\n  }, [isAuthenticated, token]);\n\n  const handleFileChange = (event) => \n  {\n    setFile(event.target.files[0]);\n  };\n\n  const handleFileUpload = () =>\n  {\n    if(file)\n    {\n      const formData = new FormData;\n      formData.append('file', file);\n      formData.append('token', token);\n      formData.append('username', username);\n\n      $.ajax({\n\n          type: \"POST\",\n          url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n          data: formData,\n          contentType: false,\n          processData: false,\n\n          success(data) {\n            if (data.success) \n            {\n              setFiles([...files, { file_name: file.name, file_path: `storage/${file.name}` }]);\n              setFile(null);\n            } \n            else \n            {\n              console.error('File upload error:', data.message);\n            }\n          },\n          error(xhr, status, error) {\n            console.error('AJAX error:', status, error);\n          }\n\n      });\n\n    }\n  }\n\n  const updateFilesList = (newFiles) => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  //preventing files from downloading and not downloading\n  const downloadFile = (path) =>\n  {\n    const fileName = path;\n    console.log(fileName);\n    const aTag = document.createElement(\"a\");\n    aTag.href = path;\n    aTag.setAttribute(\"download\", fileName);\n    document.body.appendChild(aTag);\n    aTag.click();\n    aTag.remove();\n  }\n  //\n\n  // rename file\n  const renameFile = (fileName) =>\n  {\n    setRenamingFile(fileName);\n    setNewFileName(fileName);\n    setShowModal(true);\n  }\n  const handleRenameSave = (newName) =>\n  {\n    console.log(\"Renaming file:\", renamingFile, \"to\", newName);\n    setShowModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/renameFile.php',\n      data: { oldName: renamingFile, newName: newName, username },\n      success: function(data) {\n          if (data.success) {\n              setFiles(files.map(file =>\n                  file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n              setFiltredFiles(filtredFiles.map(file =>\n                file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n          } else {\n              console.error('Failed to rename file:', data.message);\n          }\n      },\n      error: function(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n          console.log(\"Response Text:\", xhr.responseText);\n      }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: 'http://localhost/webologyTaskPHP/backend/renameFileTags.php',\n    data: { oldName: renamingFile, newName: newName, username },\n    success: function(data) {\n        if (data.success) {\n          setFiltredFiles(filtredFiles.map(file =>\n            file.file_name === renamingFile ? { ...file, file_name: newName } : file\n          ));\n        } else {\n            console.error('Failed to rename file:', data.message);\n        }\n    },\n});\n  }\n  /**/\n  //deleteFile\n  const deleteFile = (fileName) => \n  {\n    setDeletingFile(fileName);\n    setShowDeleteModal(true);\n  }\n  const handleDelete = () => \n  {\n    console.log(\"Deleting file:\", deletingFile);\n    setShowDeleteModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFile.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(files.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFileTags.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(filtredFiles.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n  /**/\n  // tagging \n  const updateTags = (fileName) =>\n  {\n    pullFreshTags(fileName);\n    setShowTagModal(true);\n    setToBeTaggedFile(fileName);\n  }  \n  const handleTagToggle = (tag) => \n  {\n    if (userTags.includes(tag)) {\n        setUserTags(userTags.filter(t => t !== tag));\n    } else {\n        setUserTags([...userTags, tag]);\n    }\n  };\n  const handleTagInputChange = (event) => \n  {\n    setNewTag(event.target.value);\n  };\n  const handleAddTag = (tagName) =>\n  {\n    if (newTag && !userTags.includes(tagName)) \n    {\n      setUserTags([...userTags, newTag]);\n      setNewTag(\"\");\n    }\n  } \n  const onClose = () =>\n  {\n    setShowTagModal(false);\n  }\n  const handleSave = () => {\n    setShowTagModal(false);\n  \n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/updateTags.php',\n      data: { username: username, fileName: toBeTaggedFile, tags: JSON.stringify(userTags) },\n      success: function(data) {\n        console.log(\"Server Response:\", data);\n        if (data.success) {\n          setFiles(files.map(file =>\n            file.file_name === toBeTaggedFile ? { ...file, tags: userTags } : file\n          ));\n\n          if(!refreshTags)\n            setrefreshTags(true);\n          else\n            setrefreshTags(false);\n\n        } else {\n          console.error('Failed to update tags:', data.message);\n        }\n      },\n      error: function(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n        console.log(\"Response Text:\", xhr.responseText);\n      }\n    });\n  }\n  const pullFreshTags = (fileName) =>\n  {\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/getFileTags.php',\n      data: { username: username, fileName: fileName },\n      success(data) \n      {\n        if (data.success) \n        {\n          setUserTags(data.tags || []);\n        } \n        else \n        {\n          setUserTags([]);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n\n  // filter\n  const startFilter = () => \n  {\n    setShowFilterModal(true);\n    if(!refreshTags)\n      setrefreshTags(true);\n    else\n      setrefreshTags(false);\n  }\n  const showFiltredData = (tags) => {\n    if (tags.length > 0) \n    {\n      setCurrentSelectTags(tags);\n      setFilter(true);\n      setFiltredFiles([]);\n      tags.forEach(tag => {\n          $.ajax({\n              type: \"POST\",\n              url: 'http://localhost/webologyTaskPHP/backend/getFilteredFiles.php',\n              data: { username, tag },\n              success: function(data) \n              {\n                  if (data.success) \n                  {\n                    setFiltredFiles(prevFiles => [...prevFiles, ...data.files.map(file => ({ file_name: file }))]);\n                  } \n                  else \n                  {\n                      console.error('Error retrieving filtered files:', data.message);\n                  }\n              },\n              error: function(xhr, status, error) {\n                  console.error('AJAX error:', status, error);\n              }\n          });\n      });\n      setShowFilterModal(false);\n    } \n    else \n    {\n      setCurrentSelectTags([]);\n      setShowFilterModal(false);\n      setFilter(false);\n      setFiltredFiles([]);\n    }\n};\n  /**/\n\n  if (!isAuthenticated) \n  {\n    return <Navigate to=\"/login\"/>;\n  }\n\n  // layout\n  return(\n    <>\n\n      <div className='header'>\n        <h1>Hello <strong> {username} </strong>, welcome to your dashboard!</h1>\n      </div>\n      \n      <div className='filesBrowser'>\n        <h2>Your files: </h2>\n\n        <DragNdrop token={token} username={username} updateFilesList={updateFilesList} />\n\n        <div className='documentList'>\n          <div className='filterSpace'>\n\n            {\n            currentSelectTags.length > 0 ? (\n              <h3 className='caption'>showing files inluding tags: {\n                currentSelectTags.map((currentSelectTag, index) => (<span className='currentSelectTag' key={index}> {currentSelectTag}</span>) )}</h3>)\n                :\n                <h3>(no filter)</h3>\n              \n            }\n            <button className='filter' onClick={startFilter}> <img src={filerIcon} alt=\"Delete\" /> </button>\n          </div>\n          <table>\n            <thead>\n              <tr className='tableHeader'>\n                <th>File Name</th>\n                <th className='actionLine'>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {files.length === 0 ? (\n                <tr>\n                  <td colSpan=\"2\">No files</td>\n                </tr>\n              ) : (\n\n                filter ?\n                filtredFiles.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={()",
      "suffix": "                    <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n\n                  </tr>\n\n                ))\n                :\n                files.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n                  </tr>\n                ))\n\n\n              )}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleRenameSave}\n        newFileName={newFileName}\n        setNewFileName={setNewFileName}\n        oldFileName={renamingFile}\n      />\n\n      <YesNoModal\n        show={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onSave={handleDelete}\n        fileName={deletingFile}\n      />\n      <Filter\n        show={showFilterModal}\n        onClose={() => setShowFilterModal(false)}\n        onSave={showFiltredData}\n        username = {username}\n        refresh = {refreshTags}\n      />\n\n      {showTagModal && (\n\n        // pullFreshTags(toBeTaggedFile),\n\n        <div className='overlay'>\n          <div className=\"modal\">\n            <h4>Update Tags for file \"{toBeTaggedFile}\"</h4>\n            {/*checkboxes*/}\n            <div className=\"tags-list\">\n                {userTags.map((tag, index) => (\n                  <div key={index} className=\"tag-item checkBoxes\">\n                    <input\n                      className=\"checkBox\"\n                      type=\"checkbox\"\n                      checked={userTags.includes(tag)}\n                      onChange={() => handleTagToggle(tag)}\n                    />\n                    <span>{tag}</span>\n                  </div>\n                ))}\n            </div>\n            {/*add tag*/}\n            <div className=\"add-tag\">\n              <input\n                className='input'\n                type=\"text\"\n                value={newTag}\n                onChange={handleTagInputChange}\n                placeholder=\"Enter new tag\"\n                onKeyUp={(e) => e.key === 'Enter' && handleAddTag()}\n              />\n              <button className='addButton' onClick={handleAddTag}>Add Tag</button>\n            </div>\n            {/*functional buttons*/}\n            <div className=\"modal-actions\">\n              <button className='cancelButton' onClick={onClose}>Cancel</button>\n              <button onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n\n      )}\n\n    </>\n  \n\n  );\n}",
      "real_middle": " => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n  ",
      "generated_middle": "=> renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "// imports\nimport React, { useEffect, useState, useRef } from 'react';\nimpor",
      "suffix": "import './dashboard.scss';\n\n// components\nimport DragNdrop from \"../components/DragNdrop\";\nimport Modal from '../components/Modal';\nimport YesNoModal from '../components/YesNoModal';\nimport Filter from '../components/filter';\n\n\n//images\nimport downloadIcon from '../imgs/downloadIcon.png';\nimport renameIcon from '../imgs/renameIco.png';\nimport deleteIcon from '../imgs/deleteIco.png';\nimport tagIcon from '../imgs/tagIco.png';\nimport filerIcon from '../imgs/filteIco.png';\n\n\nexport default function Dashboard() \n{\n  const isAuthenticated = sessionStorage.getItem('isAuthenticated') === 'true';\n  const token = sessionStorage.getItem('token');\n\n  const [username, setUsername] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const [filter, setFilter] = useState(false);\n  const [filtredFiles, setFiltredFiles] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n\n  const [files, setFiles] = useState([]);\n  const [file, setFile] = useState(null);\n  const inputRef = useRef();\n\n  const [renamingFile, setRenamingFile] = useState(null);\n  const [newFileName, setNewFileName] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  \n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deletingFile, setDeletingFile] = useState(null);\n\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [toBeTaggedFile, setToBeTaggedFile] = useState(false);\n  const [userTags, setUserTags] = useState([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [refreshTags, setrefreshTags] = useState(false);\n  const [currentSelectTags, setCurrentSelectTags] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated && token) \n    {\n      $.ajax({\n        type: \"POST\",\n        url: 'http://localhost/webologyTaskPHP/backend/getUserInfo.php',\n        data: {token},\n        success(data) \n        {\n          setResult(data);\n          if (data.success)\n          {\n            setUsername(data.username);\n            setFiles(data.files || []);\n          }\n          else\n          {\n            console.error('Failed to fetch user info:', data.message);\n          }\n        },\n        error(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n        }\n      });\n    }\n  }, [isAuthenticated, token]);\n\n  const handleFileChange = (event) => \n  {\n    setFile(event.target.files[0]);\n  };\n\n  const handleFileUpload = () =>\n  {\n    if(file)\n    {\n      const formData = new FormData;\n      formData.append('file', file);\n      formData.append('token', token);\n      formData.append('username', username);\n\n      $.ajax({\n\n          type: \"POST\",\n          url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n          data: formData,\n          contentType: false,\n          processData: false,\n\n          success(data) {\n            if (data.success) \n            {\n              setFiles([...files, { file_name: file.name, file_path: `storage/${file.name}` }]);\n              setFile(null);\n            } \n            else \n            {\n              console.error('File upload error:', data.message);\n            }\n          },\n          error(xhr, status, error) {\n            console.error('AJAX error:', status, error);\n          }\n\n      });\n\n    }\n  }\n\n  const updateFilesList = (newFiles) => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  //preventing files from downloading and not downloading\n  const downloadFile = (path) =>\n  {\n    const fileName = path;\n    console.log(fileName);\n    const aTag = document.createElement(\"a\");\n    aTag.href = path;\n    aTag.setAttribute(\"download\", fileName);\n    document.body.appendChild(aTag);\n    aTag.click();\n    aTag.remove();\n  }\n  //\n\n  // rename file\n  const renameFile = (fileName) =>\n  {\n    setRenamingFile(fileName);\n    setNewFileName(fileName);\n    setShowModal(true);\n  }\n  const handleRenameSave = (newName) =>\n  {\n    console.log(\"Renaming file:\", renamingFile, \"to\", newName);\n    setShowModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/renameFile.php',\n      data: { oldName: renamingFile, newName: newName, username },\n      success: function(data) {\n          if (data.success) {\n              setFiles(files.map(file =>\n                  file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n              setFiltredFiles(filtredFiles.map(file =>\n                file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n          } else {\n              console.error('Failed to rename file:', data.message);\n          }\n      },\n      error: function(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n          console.log(\"Response Text:\", xhr.responseText);\n      }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: 'http://localhost/webologyTaskPHP/backend/renameFileTags.php',\n    data: { oldName: renamingFile, newName: newName, username },\n    success: function(data) {\n        if (data.success) {\n          setFiltredFiles(filtredFiles.map(file =>\n            file.file_name === renamingFile ? { ...file, file_name: newName } : file\n          ));\n        } else {\n            console.error('Failed to rename file:', data.message);\n        }\n    },\n});\n  }\n  /**/\n  //deleteFile\n  const deleteFile = (fileName) => \n  {\n    setDeletingFile(fileName);\n    setShowDeleteModal(true);\n  }\n  const handleDelete = () => \n  {\n    console.log(\"Deleting file:\", deletingFile);\n    setShowDeleteModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFile.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(files.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFileTags.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(filtredFiles.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n  /**/\n  // tagging \n  const updateTags = (fileName) =>\n  {\n    pullFreshTags(fileName);\n    setShowTagModal(true);\n    setToBeTaggedFile(fileName);\n  }  \n  const handleTagToggle = (tag) => \n  {\n    if (userTags.includes(tag)) {\n        setUserTags(userTags.filter(t => t !== tag));\n    } else {\n        setUserTags([...userTags, tag]);\n    }\n  };\n  const handleTagInputChange = (event) => \n  {\n    setNewTag(event.target.value);\n  };\n  const handleAddTag = (tagName) =>\n  {\n    if (newTag && !userTags.includes(tagName)) \n    {\n      setUserTags([...userTags, newTag]);\n      setNewTag(\"\");\n    }\n  } \n  const onClose = () =>\n  {\n    setShowTagModal(false);\n  }\n  const handleSave = () => {\n    setShowTagModal(false);\n  \n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/updateTags.php',\n      data: { username: username, fileName: toBeTaggedFile, tags: JSON.stringify(userTags) },\n      success: function(data) {\n        console.log(\"Server Response:\", data);\n        if (data.success) {\n          setFiles(files.map(file =>\n            file.file_name === toBeTaggedFile ? { ...file, tags: userTags } : file\n          ));\n\n          if(!refreshTags)\n            setrefreshTags(true);\n          else\n            setrefreshTags(false);\n\n        } else {\n          console.error('Failed to update tags:', data.message);\n        }\n      },\n      error: function(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n        console.log(\"Response Text:\", xhr.responseText);\n      }\n    });\n  }\n  const pullFreshTags = (fileName) =>\n  {\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/getFileTags.php',\n      data: { username: username, fileName: fileName },\n      success(data) \n      {\n        if (data.success) \n        {\n          setUserTags(data.tags || []);\n        } \n        else \n        {\n          setUserTags([]);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n\n  // filter\n  const startFilter = () => \n  {\n    setShowFilterModal(true);\n    if(!refreshTags)\n      setrefreshTags(true);\n    else\n      setrefreshTags(false);\n  }\n  const showFiltredData = (tags) => {\n    if (tags.length > 0) \n    {\n      setCurrentSelectTags(tags);\n      setFilter(true);\n      setFiltredFiles([]);\n      tags.forEach(tag => {\n          $.ajax({\n              type: \"POST\",\n              url: 'http://localhost/webologyTaskPHP/backend/getFilteredFiles.php',\n              data: { username, tag },\n              success: function(data) \n              {\n                  if (data.success) \n                  {\n                    setFiltredFiles(prevFiles => [...prevFiles, ...data.files.map(file => ({ file_name: file }))]);\n                  } \n                  else \n                  {\n                      console.error('Error retrieving filtered files:', data.message);\n                  }\n              },\n              error: function(xhr, status, error) {\n                  console.error('AJAX error:', status, error);\n              }\n          });\n      });\n      setShowFilterModal(false);\n    } \n    else \n    {\n      setCurrentSelectTags([]);\n      setShowFilterModal(false);\n      setFilter(false);\n      setFiltredFiles([]);\n    }\n};\n  /**/\n\n  if (!isAuthenticated) \n  {\n    return <Navigate to=\"/login\"/>;\n  }\n\n  // layout\n  return(\n    <>\n\n      <div className='header'>\n        <h1>Hello <strong> {username} </strong>, welcome to your dashboard!</h1>\n      </div>\n      \n      <div className='filesBrowser'>\n        <h2>Your files: </h2>\n\n        <DragNdrop token={token} username={username} updateFilesList={updateFilesList} />\n\n        <div className='documentList'>\n          <div className='filterSpace'>\n\n            {\n            currentSelectTags.length > 0 ? (\n              <h3 className='caption'>showing files inluding tags: {\n                currentSelectTags.map((currentSelectTag, index) => (<span className='currentSelectTag' key={index}> {currentSelectTag}</span>) )}</h3>)\n                :\n                <h3>(no filter)</h3>\n              \n            }\n            <button className='filter' onClick={startFilter}> <img src={filerIcon} alt=\"Delete\" /> </button>\n          </div>\n          <table>\n            <thead>\n              <tr className='tableHeader'>\n                <th>File Name</th>\n                <th className='actionLine'>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {files.length === 0 ? (\n                <tr>\n                  <td colSpan=\"2\">No files</td>\n                </tr>\n              ) : (\n\n                filter ?\n                filtredFiles.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n\n                  </tr>\n\n                ))\n                :\n                files.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n                  </tr>\n                ))\n\n\n              )}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleRenameSave}\n        newFileName={newFileName}\n        setNewFileName={setNewFileName}\n        oldFileName={renamingFile}\n      />\n\n      <YesNoModal\n        show={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onSave={handleDelete}\n        fileName={deletingFile}\n      />\n      <Filter\n        show={showFilterModal}\n        onClose={() => setShowFilterModal(false)}\n        onSave={showFiltredData}\n        username = {username}\n        refresh = {refreshTags}\n      />\n\n      {showTagModal && (\n\n        // pullFreshTags(toBeTaggedFile),\n\n        <div className='overlay'>\n          <div className=\"modal\">\n            <h4>Update Tags for file \"{toBeTaggedFile}\"</h4>\n            {/*checkboxes*/}\n            <div className=\"tags-list\">\n                {userTags.map((tag, index) => (\n                  <div key={index} className=\"tag-item checkBoxes\">\n                    <input\n                      className=\"checkBox\"\n                      type=\"checkbox\"\n                      checked={userTags.includes(tag)}\n                      onChange={() => handleTagToggle(tag)}\n                    />\n                    <span>{tag}</span>\n                  </div>\n                ))}\n            </div>\n            {/*add tag*/}\n            <div className=\"add-tag\">\n              <input\n                className='input'\n                type=\"text\"\n                value={newTag}\n                onChange={handleTagInputChange}\n                placeholder=\"Enter new tag\"\n                onKeyUp={(e) => e.key === 'Enter' && handleAddTag()}\n              />\n              <button className='addButton' onClick={handleAddTag}>Add Tag</button>\n            </div>\n            {/*functional buttons*/}\n            <div className=\"modal-actions\">\n              <button className='cancelButton' onClick={onClose}>Cancel</button>\n              <button onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n\n      )}\n\n    </>\n  \n\n  );\n}",
      "real_middle": "t { Navigate } from 'react-router-dom';\nimport $ from 'jquery';\n",
      "generated_middle": "t { Navigate } from'react-router-dom';\nimport $ from 'jquery';",
      "exact_match": false,
      "chrf": 100.0,
      "levenshtein_distance": 1
    },
    {
      "prefix": "// imports\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport $ from 'jquery';\nimport './dashboard.scss';\n\n// components\nimport DragNdrop from \"../components/DragNdrop\";\nimport Modal from '../components/Modal';\nimport YesNoModal from '../components/YesNoModal';\nimport Filter from '../components/filter';\n\n\n//images\nimport downloadIcon from '../imgs/downloadIcon.png';\nimport renameIcon from '../imgs/renameIco.png';\nimport deleteIcon from '../imgs/deleteIco.png';\nimport tagIcon from '../imgs/tagIco.png';\nimport filerIcon from '../imgs/filteIco.png';\n\n\nexport default function Dashboard() \n{\n  const isAuthenticated = sessionStorage.getItem('isAuthenticated') === 'true';\n  const token = sessionStorage.getItem('token');\n\n  const [username, setUsername] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const [filter, setFilter] = useState(false);\n  const [filtredFiles, setFiltredFiles] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n\n  const [files, setFiles] = useState([]);\n  const [file, setFile] = useState(null);\n  const inputRef = useRef();\n\n  const [renamingFile, setRenamingFile] = useState(null);\n  const [newFileName, setNewFileName] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  \n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deletingFile, setDeletingFile] = useState(null);\n\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [toBeTaggedFile, setToBeTaggedFile] = useState(false);\n  const [userTags, setUserTags] = useState([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const [showFilterModal, setShowFilterModal] = useState(false);\n  const [refreshTags, setrefreshTags] = useState(false);\n  const [currentSelectTags, setCurrentSelectTags] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated && token) \n    {\n      $.ajax({\n        type: \"POST\",\n        url: 'http://localhost/webologyTaskPHP/backend/getUserInfo.php',\n        data: {token},\n        success(data) \n        {\n          setResult(data);\n          if (data.success)\n          {\n            setUsername(data.username);\n            setFiles(data.files || []);\n          }\n          else\n          {\n            console.error('Failed to fetch user info:', data.message);\n          }\n        },\n        error(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n        }\n      });\n    }\n  }, [isAuthenticated, token]);\n\n  const handleFileChange = (event) => \n  {\n    setFile(event.target.files[0]);\n  };\n\n  const handleFileUpload = () =>\n  {\n    if(file)\n    {\n      const formData = new FormData;\n      formData.append('file', file);\n      formData.append('token', token);\n      formData.append('username', username);\n\n      $.ajax({\n\n          type: \"POST\",\n          url: 'http://localhost/webologyTaskPHP/backend/uploadFile.php',\n          data: formData,\n          contentType: false,\n          processData: false,\n\n          success(data) {\n            if (data.success) \n            {\n              setFiles([...files, { file_name: file.name, file_path: `storage/${file.name}` }]);\n              setFile(null);\n            } \n            else \n            {\n              console.error('File upload error:', data.message);\n            }\n          },\n          error(xhr, status, error) {\n            console.error('AJAX error:', status, error);\n          }\n\n      });\n\n    }\n  }\n\n  const updateFilesList = (newFiles) => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  //preventing files from downloading and not downloading\n  const downloadFile = (path) =>\n  {\n    const fileName = path;\n    console.log(fileName);\n    const aTag = document.createElement(\"a\");\n    aTag.href = path;\n    aTag.setAttribute(\"download\", fileName);\n    document.body.appendChild(aTag);\n    aTag.click();\n    aTag.remove();\n  }\n  //\n\n  // rename file\n  const renameFile = (fileName) =>\n  {\n    setRenamingFile(fileName);\n    setNewFileName(fileName);\n    setShowModal(true);\n  }\n  const handleRenameSave = (newName) =>\n  {\n    console.log(\"Renaming file:\", renamingFile, \"to\", newName);\n ",
      "suffix": "ebologyTaskPHP/backend/renameFile.php',\n      data: { oldName: renamingFile, newName: newName, username },\n      success: function(data) {\n          if (data.success) {\n              setFiles(files.map(file =>\n                  file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n              setFiltredFiles(filtredFiles.map(file =>\n                file.file_name === renamingFile ? { ...file, file_name: newName } : file\n              ));\n          } else {\n              console.error('Failed to rename file:', data.message);\n          }\n      },\n      error: function(xhr, status, error) {\n          console.error('AJAX error:', status, error);\n          console.log(\"Response Text:\", xhr.responseText);\n      }\n  });\n  $.ajax({\n    type: \"POST\",\n    url: 'http://localhost/webologyTaskPHP/backend/renameFileTags.php',\n    data: { oldName: renamingFile, newName: newName, username },\n    success: function(data) {\n        if (data.success) {\n          setFiltredFiles(filtredFiles.map(file =>\n            file.file_name === renamingFile ? { ...file, file_name: newName } : file\n          ));\n        } else {\n            console.error('Failed to rename file:', data.message);\n        }\n    },\n});\n  }\n  /**/\n  //deleteFile\n  const deleteFile = (fileName) => \n  {\n    setDeletingFile(fileName);\n    setShowDeleteModal(true);\n  }\n  const handleDelete = () => \n  {\n    console.log(\"Deleting file:\", deletingFile);\n    setShowDeleteModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFile.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(files.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/deleteFileTags.php',\n      data: { fileName: deletingFile, username },\n      success(data) {\n        if (data.success) {\n          setFiles(filtredFiles.filter(file => file.file_name !== deletingFile));\n        } else {\n          console.error('Failed to delete file:', data.message);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n  /**/\n  // tagging \n  const updateTags = (fileName) =>\n  {\n    pullFreshTags(fileName);\n    setShowTagModal(true);\n    setToBeTaggedFile(fileName);\n  }  \n  const handleTagToggle = (tag) => \n  {\n    if (userTags.includes(tag)) {\n        setUserTags(userTags.filter(t => t !== tag));\n    } else {\n        setUserTags([...userTags, tag]);\n    }\n  };\n  const handleTagInputChange = (event) => \n  {\n    setNewTag(event.target.value);\n  };\n  const handleAddTag = (tagName) =>\n  {\n    if (newTag && !userTags.includes(tagName)) \n    {\n      setUserTags([...userTags, newTag]);\n      setNewTag(\"\");\n    }\n  } \n  const onClose = () =>\n  {\n    setShowTagModal(false);\n  }\n  const handleSave = () => {\n    setShowTagModal(false);\n  \n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/updateTags.php',\n      data: { username: username, fileName: toBeTaggedFile, tags: JSON.stringify(userTags) },\n      success: function(data) {\n        console.log(\"Server Response:\", data);\n        if (data.success) {\n          setFiles(files.map(file =>\n            file.file_name === toBeTaggedFile ? { ...file, tags: userTags } : file\n          ));\n\n          if(!refreshTags)\n            setrefreshTags(true);\n          else\n            setrefreshTags(false);\n\n        } else {\n          console.error('Failed to update tags:', data.message);\n        }\n      },\n      error: function(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n        console.log(\"Response Text:\", xhr.responseText);\n      }\n    });\n  }\n  const pullFreshTags = (fileName) =>\n  {\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/webologyTaskPHP/backend/getFileTags.php',\n      data: { username: username, fileName: fileName },\n      success(data) \n      {\n        if (data.success) \n        {\n          setUserTags(data.tags || []);\n        } \n        else \n        {\n          setUserTags([]);\n        }\n      },\n      error(xhr, status, error) {\n        console.error('AJAX error:', status, error);\n      }\n    });\n  }\n\n  // filter\n  const startFilter = () => \n  {\n    setShowFilterModal(true);\n    if(!refreshTags)\n      setrefreshTags(true);\n    else\n      setrefreshTags(false);\n  }\n  const showFiltredData = (tags) => {\n    if (tags.length > 0) \n    {\n      setCurrentSelectTags(tags);\n      setFilter(true);\n      setFiltredFiles([]);\n      tags.forEach(tag => {\n          $.ajax({\n              type: \"POST\",\n              url: 'http://localhost/webologyTaskPHP/backend/getFilteredFiles.php',\n              data: { username, tag },\n              success: function(data) \n              {\n                  if (data.success) \n                  {\n                    setFiltredFiles(prevFiles => [...prevFiles, ...data.files.map(file => ({ file_name: file }))]);\n                  } \n                  else \n                  {\n                      console.error('Error retrieving filtered files:', data.message);\n                  }\n              },\n              error: function(xhr, status, error) {\n                  console.error('AJAX error:', status, error);\n              }\n          });\n      });\n      setShowFilterModal(false);\n    } \n    else \n    {\n      setCurrentSelectTags([]);\n      setShowFilterModal(false);\n      setFilter(false);\n      setFiltredFiles([]);\n    }\n};\n  /**/\n\n  if (!isAuthenticated) \n  {\n    return <Navigate to=\"/login\"/>;\n  }\n\n  // layout\n  return(\n    <>\n\n      <div className='header'>\n        <h1>Hello <strong> {username} </strong>, welcome to your dashboard!</h1>\n      </div>\n      \n      <div className='filesBrowser'>\n        <h2>Your files: </h2>\n\n        <DragNdrop token={token} username={username} updateFilesList={updateFilesList} />\n\n        <div className='documentList'>\n          <div className='filterSpace'>\n\n            {\n            currentSelectTags.length > 0 ? (\n              <h3 className='caption'>showing files inluding tags: {\n                currentSelectTags.map((currentSelectTag, index) => (<span className='currentSelectTag' key={index}> {currentSelectTag}</span>) )}</h3>)\n                :\n                <h3>(no filter)</h3>\n              \n            }\n            <button className='filter' onClick={startFilter}> <img src={filerIcon} alt=\"Delete\" /> </button>\n          </div>\n          <table>\n            <thead>\n              <tr className='tableHeader'>\n                <th>File Name</th>\n                <th className='actionLine'>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {files.length === 0 ? (\n                <tr>\n                  <td colSpan=\"2\">No files</td>\n                </tr>\n              ) : (\n\n                filter ?\n                filtredFiles.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n\n                  </tr>\n\n                ))\n                :\n                files.map((file, index) => (\n                  <tr className='documentLine' key={index}>\n                    <td className='nameRow'>{file.file_name}</td>\n                    <td className='actionRow'>\n                      <button className='downloadBTN' onClick={() => downloadFile(file.file_name)}> <img src={downloadIcon} alt='download'/> </button>\n                      <button className='renameBTN' onClick={() => renameFile(file.file_name)}> <img src={renameIcon} alt=\"Rename\"/> </button>\n                      <button className='deleteBTN' onClick={() => deleteFile(file.file_name)}> <img src={deleteIcon} alt=\"Delete\" /> </button>\n                      <button className='addTagBTN' onClick={() => updateTags(file.file_name, file.tags)}> <img src={tagIcon} alt=\"Delete\" /> </button>\n                    </td>\n                  </tr>\n                ))\n\n\n              )}\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n\n      <Modal\n        show={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleRenameSave}\n        newFileName={newFileName}\n        setNewFileName={setNewFileName}\n        oldFileName={renamingFile}\n      />\n\n      <YesNoModal\n        show={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onSave={handleDelete}\n        fileName={deletingFile}\n      />\n      <Filter\n        show={showFilterModal}\n        onClose={() => setShowFilterModal(false)}\n        onSave={showFiltredData}\n        username = {username}\n        refresh = {refreshTags}\n      />\n\n      {showTagModal && (\n\n        // pullFreshTags(toBeTaggedFile),\n\n        <div className='overlay'>\n          <div className=\"modal\">\n            <h4>Update Tags for file \"{toBeTaggedFile}\"</h4>\n            {/*checkboxes*/}\n            <div className=\"tags-list\">\n                {userTags.map((tag, index) => (\n                  <div key={index} className=\"tag-item checkBoxes\">\n                    <input\n                      className=\"checkBox\"\n                      type=\"checkbox\"\n                      checked={userTags.includes(tag)}\n                      onChange={() => handleTagToggle(tag)}\n                    />\n                    <span>{tag}</span>\n                  </div>\n                ))}\n            </div>\n            {/*add tag*/}\n            <div className=\"add-tag\">\n              <input\n                className='input'\n                type=\"text\"\n                value={newTag}\n                onChange={handleTagInputChange}\n                placeholder=\"Enter new tag\"\n                onKeyUp={(e) => e.key === 'Enter' && handleAddTag()}\n              />\n              <button className='addButton' onClick={handleAddTag}>Add Tag</button>\n            </div>\n            {/*functional buttons*/}\n            <div className=\"modal-actions\">\n              <button className='cancelButton' onClick={onClose}>Cancel</button>\n              <button onClick={handleSave}>Save</button>\n            </div>\n          </div>\n        </div>\n\n      )}\n\n    </>\n  \n\n  );\n}",
      "real_middle": "   setShowModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/w",
      "generated_middle": "setShowModal(false);\n\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost/w",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function TagModal({ show, onClose, onSave, fileName, initialTags = [] }) {\n    const [tags, setTags] = useState([]);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // // Use useEffect to set tags whenever initialTags changes\n    // useEffect(() => {\n    //     setTags(initialTags);\n    // }, [initialTags]);\n\n    const handleTagInputChange = (event) => {\n        setNewTag(event.target.value);\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !tags.includes(newTag)) {\n            setTags([...tags, newTag]);\n            setNewTag(\"\");\n        }\n    };\n\n    const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {\n            setTags(tags.filter(t => t !== tag));\n        } else {\n            setTags([...tags, tag]);\n        }\n    };\n\n    const handleSave = () => {\n        onSave(tags);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className=\"modal-overlay\">\n    ",
      "suffix": "</h2>\n\n                <div className=\"tags-section\">\n                    <h3>Tags</h3>\n                    <div className=\"tags-list\">\n                        {tags.map((tag, index) => (\n                            <div key={index} className=\"tag-item\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={tags.includes(tag)}\n                                    onChange={() => handleTagToggle(tag)}\n                                />\n                                <span>{tag}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"add-tag\">\n                    <input\n                        type=\"text\"\n                        value={newTag}\n                        onChange={handleTagInputChange}\n                        placeholder=\"Enter new tag\"\n                    />\n                    <button onClick={handleAddTag}>Add Tag</button>\n                </div>\n\n                <div className=\"modal-actions\">\n                    <button onClick={onClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "real_middle": "        <div className=\"modal\">\n                <h2>Update Tags for file \"{fileName}\"",
      "generated_middle": "<div className=\"modal-container\">\n                <h2>Tags for {fileName}",
      "exact_match": false,
      "chrf": 64.19832868248801,
      "levenshtein_distance": 24
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function TagModal({ show, onClose, onSave, fileName, initialTags = [] }) {\n    const [tags, setTags] = useState([]);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // // Use useEffect to set tags whenever initialTags changes\n    // useEffect(() => {\n    //     setTags(initialTags);\n    // }, [initialTags]);\n\n    const handleTagInputChange = (event) => {\n        setNewTag(event.target.value);\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !tags.includes(newTag)) {\n            setTags([...tags, newTag]);\n            setNewTag(\"\");\n        }\n    };\n\n    const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {\n            setTags(tags.filter(t => t !== tag));\n        } else {\n            setTags([...tags, tag]);\n        }\n    };\n\n    const handleSave = () => {\n        onSave(tags);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal\">\n                <h2>Update Tags for file \"{fileName}\"</h2>\n\n                <div className=\"tags-section\">\n                    <h3>Tags</h3>\n                    <div className=\"tags-list\">\n                        {tags.map((tag, index) => (\n                            <div key={index} className=\"tag-item\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={tags.includes(tag)}\n                                  ",
      "suffix": ")}\n                                />\n                                <span>{tag}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"add-tag\">\n                    <input\n                        type=\"text\"\n                        value={newTag}\n                        onChange={handleTagInputChange}\n                        placeholder=\"Enter new tag\"\n                    />\n                    <button onClick={handleAddTag}>Add Tag</button>\n                </div>\n\n                <div className=\"modal-actions\">\n                    <button onClick={onClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "real_middle": "  onChange={() => handleTagToggle(tag",
      "generated_middle": "onChange={() => handleTagToggle(tag",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function TagModal({ show, onClose, onSave, fileName, initialTags = [] }) {\n    const [tags, setTags] = useState([]);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // // Use useEffect to set tags whenever initialTags changes\n    // useEffect(() => {\n    //     setTags(initialTags);\n    // }, [initialTags]);\n\n    const handleTagInputChange = (event) => {\n        setNewTag(event.target.value);\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !tags.includes(newTag)) {\n            setTags([...tags, newTag]);\n            setNewTag(\"\");\n        }\n    };\n\n    ",
      "suffix": "     setTags(tags.filter(t => t !== tag));\n        } else {\n            setTags([...tags, tag]);\n        }\n    };\n\n    const handleSave = () => {\n        onSave(tags);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal\">\n                <h2>Update Tags for file \"{fileName}\"</h2>\n\n                <div className=\"tags-section\">\n                    <h3>Tags</h3>\n                    <div className=\"tags-list\">\n                        {tags.map((tag, index) => (\n                            <div key={index} className=\"tag-item\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={tags.includes(tag)}\n                                    onChange={() => handleTagToggle(tag)}\n                                />\n                                <span>{tag}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"add-tag\">\n                    <input\n                        type=\"text\"\n                        value={newTag}\n                        onChange={handleTagInputChange}\n                        placeholder=\"Enter new tag\"\n                    />\n                    <button onClick={handleAddTag}>Add Tag</button>\n                </div>\n\n                <div className=\"modal-actions\">\n                    <button onClick={onClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "real_middle": "const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {\n       ",
      "generated_middle": "const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function TagModal({ show, onClose, onSave, fileName, initialTags = [] }) {\n    const [tags, setTags] = useState([]);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // // Use useEffect to set tags whenever initialTags changes\n    // useEffect(() => {\n    //     setTags(initialTags);\n    // }, [initialTags]);\n\n    const handleTagInputChange = (event) => {\n        setNewTag(event.target.value);\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !tags.includes(newTag)) {\n            setTags([...tags, newTag]);\n            setNewTag(\"\");\n        }\n    };\n\n    const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {\n            setTags(tags.filter(t => t !== tag));\n        } else {\n            setTags([...tags, tag]);\n        }\n    };\n\n    const handleSave = () => {\n        onSave(tags);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal\">\n                <h2>Update Tags for file \"{fileName}\"</h2>\n\n                <div className=\"tags-section\">\n                    <h3>Tags</h3>\n                    <div className=\"tags-list\">\n                        {tags.map((tag, index) => (\n                            <div key={index} className=\"tag-item\">\n                                <input\n                                  ",
      "suffix": "gs.includes(tag)}\n                                    onChange={() => handleTagToggle(tag)}\n                                />\n                                <span>{tag}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"add-tag\">\n                    <input\n                        type=\"text\"\n                        value={newTag}\n                        onChange={handleTagInputChange}\n                        placeholder=\"Enter new tag\"\n                    />\n                    <button onClick={handleAddTag}>Add Tag</button>\n                </div>\n\n                <div className=\"modal-actions\">\n                    <button onClick={onClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "real_middle": "  type=\"checkbox\"\n                                    checked={ta",
      "generated_middle": "type=\"checkbox\"\n                                    checked={ta",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function TagModal({ show, onClose, onSave, fileName, initialTags = [] }) {\n    const [tags, setTags] = useState([]);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // // Use useEffect to set tags whenever initialTags changes\n    // useEffect(() => {\n    //     setTags(initialTags);\n    // }, [initialTags]);\n\n    const handleTagInputChange = (event) => {\n        setNewTag(event.target.value);\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !tags.includes(newTag)) {\n            setTags([...tags, newTag]);\n            setNewTag(\"\");\n        }\n    };\n\n    const handleTagToggle = (tag) => {\n        if (tags.includes(tag)) {\n            setTags(tags.filter(t => t !== tag));\n        } else {\n            setTags([...tags, tag]);\n        }\n    };\n\n    const handleSave = () => {\n        onSave(tags);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal\">\n                <h2>Update Tags for file \"{fileName}\"</h2>\n\n                <div className=\"tags-section\">\n                    <h3>Tags</h3>\n                    <div className=\"tags-list\">\n                        {tags.map((tag, index) => (\n                            <div key={index} className=\"tag-item\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={tags.includes(tag)}\n                                    onChange={() => handleTagToggle(tag)}\n                                />\n                                <span>{tag}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"add-tag\">\n                    <input\n                        type=\"text\"\n      ",
      "suffix": "leTagInputChange}\n                        placeholder=\"Enter new tag\"\n                    />\n                    <button onClick={handleAddTag}>Add Tag</button>\n                </div>\n\n                <div className=\"modal-actions\">\n                    <button onClick={onClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "real_middle": "                  value={newTag}\n                        onChange={hand",
      "generated_middle": "value={newTag}\n                        onChange={hand",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport './filter.scss';\n\nexport default function Modal({ show, onClose, onSave, username, refresh })\n{\n\n    const [allUserTags, setAllUserTags] = useState([]);\n    const [userTags, setUserTags] = useState([]);\n    const [selectedTags, setSelectedTags] = useState([]);\n  \n    const clearDuplicates = (arr) =>\n    {\n        return( arr.filter((item, index) => arr.indexOf(item) === index) );\n    }\n\n    useEffect(() =>{\n        setSelectedTags([]);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/getAllTags.php',\n            data: { username },\n            success(data) \n            {\n              if (data.success) \n              {\n                setAllUserTags(data.tags || []);\n              } \n              else \n              {\n                setAllUserTags([]);\n              }\n            },\n            error(xhr, status, error) {\n              console.error('AJAX error:', status, error);\n            }\n          });\n\n    }, [refresh, username]);\n    useEffect(() => {\n        setUserTags(clearDuplicates(allUserTags));\n      }, [allUserTags]);\n\n    const handleTagToggle = (tag) =>\n    {\n        if (userTags.includes(tag))\n        {\n            setUserTags(userTags.filter(t => t !== tag)); // pop\n            setSelectedTags([...selectedTags, tag]); // push\n        }\n        else if(selectedTags.includes(tag))\n        {\n            setSelectedTags(selectedTags.filter(t => t !== tag)); // pop\n            setUserTags([...userTags, tag]); // push\n        }\n    }\n\n    const handleSave = () =>\n    {\n        onSave(selectedTags);\n    }\n\n  if (!show) {\n    return null;\n  }\n    return (\n        <div className=\"modal-overlay\">\n        <div className=\"modal\">\n            <h2>Show files including this tags:</h2>\n            <div className=\"Checkedlist\">\n                <h4>selected:</h4>\n                {selectedTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButtonSel' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"UnCheckedlist\">\n                <h4>not selected:</h4>\n                {userTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButton' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"modal-actions\">\n            <button className='cancelButton' onClick={onClose}>Cancel</button>\n            <button className='filterButton' onClick={handleSave}>\n                Filter!\n            </button>\n            </div>\n ",
      "suffix": "",
      "real_middle": "       </div>\n        </div>\n    );\n}\n",
      "generated_middle": "</div>\n        </div>\n    );\n}",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport './filter.scss';\n\nexport default function Modal({ show, onClose, onSave, username, refresh })\n{\n\n    const [allUserTags, setAllUserTags] = useState([]);\n    const [userTags, setUserTags] = useState([]);\n    const [selectedTags, setSelectedTags] = useState([]);\n  \n    const clearDuplicates = (arr) =>\n    {\n        return( arr.filter((item, index) => arr.indexOf(item) === index) );\n    }\n\n    useEffect(() =>{\n        setSelectedTags([]);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/getAllTags.php',\n        ",
      "suffix": "     if (data.success) \n              {\n                setAllUserTags(data.tags || []);\n              } \n              else \n              {\n                setAllUserTags([]);\n              }\n            },\n            error(xhr, status, error) {\n              console.error('AJAX error:', status, error);\n            }\n          });\n\n    }, [refresh, username]);\n    useEffect(() => {\n        setUserTags(clearDuplicates(allUserTags));\n      }, [allUserTags]);\n\n    const handleTagToggle = (tag) =>\n    {\n        if (userTags.includes(tag))\n        {\n            setUserTags(userTags.filter(t => t !== tag)); // pop\n            setSelectedTags([...selectedTags, tag]); // push\n        }\n        else if(selectedTags.includes(tag))\n        {\n            setSelectedTags(selectedTags.filter(t => t !== tag)); // pop\n            setUserTags([...userTags, tag]); // push\n        }\n    }\n\n    const handleSave = () =>\n    {\n        onSave(selectedTags);\n    }\n\n  if (!show) {\n    return null;\n  }\n    return (\n        <div className=\"modal-overlay\">\n        <div className=\"modal\">\n            <h2>Show files including this tags:</h2>\n            <div className=\"Checkedlist\">\n                <h4>selected:</h4>\n                {selectedTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButtonSel' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"UnCheckedlist\">\n                <h4>not selected:</h4>\n                {userTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButton' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"modal-actions\">\n            <button className='cancelButton' onClick={onClose}>Cancel</button>\n            <button className='filterButton' onClick={handleSave}>\n                Filter!\n            </button>\n            </div>\n        </div>\n        </div>\n    );\n}\n",
      "real_middle": "    data: { username },\n            success(data) \n            {\n         ",
      "generated_middle": "data: { username: username },\n            success: function(data) {",
      "exact_match": false,
      "chrf": 80.03319372379646,
      "levenshtein_distance": 29
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport './filter.scss';\n\nexport default function Modal({ show, onClose, onSave, username, refresh })\n{\n\n    const [allUserTags, setAllUserTags] = useState([]);\n    const [userTags, setUserTags] = useState([]);\n    const [selectedTags, setSelectedTags] = useState([]);\n  \n    const clearDuplicates = (arr) =>\n    {\n        return( arr.filter((item, index) => arr.indexOf(item) === index) );\n    }\n\n    useEffect(() =>{\n        setSelectedTags([]);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/getAllTags.php',\n            data: { username },\n            success(data) \n            {\n              if (data.success) \n              {\n                setAllUserTags(data.tags || []);\n              } \n              else \n              {\n                setAllUserTags([]);\n              }\n            },\n            error(xhr, status, error) {\n              console.error('AJAX error:', status, error);\n            }\n          });\n\n    }, [refresh, username]);\n    useEffect(() => {\n        setUserTags(clearDuplicates(allUserTags));\n      }, [allUserTags]);\n\n    const handleTagToggle = (tag) =>\n    {\n        if (userTags.includes(tag))\n        {\n        ",
      "suffix": "op\n            setSelectedTags([...selectedTags, tag]); // push\n        }\n        else if(selectedTags.includes(tag))\n        {\n            setSelectedTags(selectedTags.filter(t => t !== tag)); // pop\n            setUserTags([...userTags, tag]); // push\n        }\n    }\n\n    const handleSave = () =>\n    {\n        onSave(selectedTags);\n    }\n\n  if (!show) {\n    return null;\n  }\n    return (\n        <div className=\"modal-overlay\">\n        <div className=\"modal\">\n            <h2>Show files including this tags:</h2>\n            <div className=\"Checkedlist\">\n                <h4>selected:</h4>\n                {selectedTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButtonSel' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"UnCheckedlist\">\n                <h4>not selected:</h4>\n                {userTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButton' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"modal-actions\">\n            <button className='cancelButton' onClick={onClose}>Cancel</button>\n            <button className='filterButton' onClick={handleSave}>\n                Filter!\n            </button>\n            </div>\n        </div>\n        </div>\n    );\n}\n",
      "real_middle": "    setUserTags(userTags.filter(t => t !== tag)); // p",
      "generated_middle": "setUserTags(userTags.filter(t => t!== tag)); // p",
      "exact_match": false,
      "chrf": 100.0,
      "levenshtein_distance": 1
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport './filter.scss';\n\nexport default function Modal({ show, onClose, onSave, username, refresh })\n{\n\n    const [allUserTags, setAllUserTags] = useState([]);\n    const [userTags, setUserTags] = useState([]);\n    const [selectedTags, setSelectedTags] = useState([]);\n  \n    const clearDuplicates = (arr) =>\n    {\n        return( arr.filter((item, index) => arr.indexOf(item) === index) );\n    }\n\n    useEffect(() =>{\n        setSelectedTags([]);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/getAllTags.php',\n            data: { username },\n            success(data) \n            {\n              if (data.success) \n              {\n                setAllUserTags(data.tags || []);\n              } \n              else \n              {\n                setAllUserTags([]);\n              }\n            },\n            error(xhr, status, error) {\n              console.error('AJAX error:', status, error);\n            }\n          });\n\n    }, [refresh, username]);\n    useEffect(() => {\n        setUserTags(clearDuplicates(allUserTags));\n      }, [allUserTags]);\n\n    const handleTagToggle = (tag) =>\n    {\n        if (userTags.includes(tag))\n        {\n            setUserTags(userTags.filter(t => t !== tag)); // pop\n            setSelectedTags([...selectedTags, tag]); // push\n        }\n        else if(selectedTags.includes(tag))\n        {\n            setSelectedTags(selectedTags.filter(t => t !== tag)); // pop\n            setUserTags([...userTags, tag]); // push\n        }\n    }\n\n    const handleSave = () =>\n    {\n        onSave(selectedTags);\n    }\n\n  if (!show) {\n    return null;\n  }\n    return (\n        <div className=\"modal-overlay\">\n        <div className=\"modal\">\n            <h2>Show files including this tags:</h2>\n            <div className=\"Checkedlist\">\n                <h4>selected:</h4>\n                {selectedTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButtonSel' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"UnCheckedlist\">\n                <h4>not selected:</h4>\n                {userTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButton' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n  ",
      "suffix": "Name=\"modal-actions\">\n            <button className='cancelButton' onClick={onClose}>Cancel</button>\n            <button className='filterButton' onClick={handleSave}>\n                Filter!\n            </button>\n            </div>\n        </div>\n        </div>\n    );\n}\n",
      "real_middle": "              ))}\n            </div>\n            <div class",
      "generated_middle": "))}\n            </div>\n            <div class",
      "exact_match": true,
      "chrf": 100.0,
      "levenshtein_distance": 0
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport './filter.scss';\n\nexport default function Modal({ show, onClose, onSave, username, refresh })\n{\n\n    const [allUserTags, setAllUserTags] = useState([]);\n    const [userTags, setUserTags] = useState([]);\n    const [selectedTags, setSelectedTags] = useState([]);\n  \n    const clearDuplicates = (arr) =>\n    {\n        return( arr.filter((item, index) => arr.indexOf(item) === index) );\n    }\n\n    useEffect(() =>{\n        setSelectedTags([]);\n\n        $.ajax({\n            type: \"POST\",\n            url: 'http://localhost/webologyTaskPHP/backend/getAllTags.php',\n            data: { username },\n            success(data) \n            {\n              if (data.success) \n              {\n                setAllUserTags(data.tags || []);\n              } \n              else \n              {\n                setAllUserTags([]);\n              }\n            },\n            error(xhr, status, error) {\n              console.error('AJAX error:', status, error);\n            }\n          });\n\n    }, [refresh, username]);\n    useEffect(() => {\n        setUserTags(clearDuplicates(allUserTags));\n      }, [allUserTags]);\n\n    const handleTagToggle = (tag) =>\n    {\n        if (userTags.includes(tag))\n        {\n            setUserTags(userTags.filter(t => t !== tag)); // pop\n            setSelectedTags([...selectedTags, tag]); // push\n        }\n        else if(selectedTags.includes(tag))\n        {\n            setSelectedTags(selectedTags.filter(t => t !== tag)); // pop\n            setUserTags([...userTags, tag]); // push\n        }\n    }\n\n    const handleSave = () =>\n    {\n        onSave(selectedTags);\n    }\n\n  if (!show) {\n    return null;\n  }\n    return (\n        <div className=\"modal-overlay\">\n        <div className=\"modal\">\n            <h2>Show files including this tags:</h2>\n            <div className=\"Checkedlist\">\n                <h4>selected:</h4>\n                {selectedTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button cl",
      "suffix": "oggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"UnCheckedlist\">\n                <h4>not selected:</h4>\n                {userTags.map((tag, index) => (\n                    <div key={index} className=\"tag-item\">\n                        <button className='tagButton' onClick={() => handleTagToggle(tag)}><span>{tag}</span></button> \n                    </div>\n                ))}\n            </div>\n            <div className=\"modal-actions\">\n            <button className='cancelButton' onClick={onClose}>Cancel</button>\n            <button className='filterButton' onClick={handleSave}>\n                Filter!\n            </button>\n            </div>\n        </div>\n        </div>\n    );\n}\n",
      "real_middle": "assName='tagButtonSel' onClick={() => handleTagT",
      "generated_middle": "assName='tagButton' onClick={() => handleTagT",
      "exact_match": false,
      "chrf": 88.11951663289396,
      "levenshtein_distance": 3
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function Modal({ show, onClose, onSave, newFileName, setNewFileName, oldFileName })\n{\n  const [newName, setNewName] = useState(\"\");\n  const [extension, setExtension] = useState(\"\");\n\n  useEffect(() => {\n    if (oldFileName) {\n      const filenameSplit = oldFileName.split('.');\n      const newName_ = filenameSplit[0];\n      const extension_ = filenameSplit.slice(1).join('.') || ''; \n\n      setNewName(newName_);\n      setExtension(extension_);\n      setNewFileName(newName_); \n    }\n  }, [oldFileName, setNewFileName]);\n\n  const handleInputChange = (event) => {\n    setNewName(event.target.value);\n    setNewFileName(event.target.value);\n  };\n\n  const handleSave = () => {\n    const fullNewFileName = `${newName}.${extension}`;\n    onSave(fullNewFileName);\n  };\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <h2>Rename File</h2>\n        <input\n          className='nameInput'\n          type=\"text\"\n          value={newName}\n          onChange={handleInputChange}\n          placeholder=\"Enter new name (without extension)\"\n        />\n        <div className=\"modal-actions\">\n          <button className='cancelRenameDelButton' onClick={onClose}>Canc",
      "suffix": "utton' onClick={handleSave} disabled={!newName}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "real_middle": "el</button>\n          <button className='renameDelB",
      "generated_middle": "el\n          </button>\n          <button className='saveRenameDelB",
      "exact_match": false,
      "chrf": 88.23751282482017,
      "levenshtein_distance": 16
    },
    {
      "prefix": "import React, { useState, useEffect } from 'react';\nimport './modal.scss';\n\nexport default function Modal({ show, onClose, onSave, newFileName, setNewFileName, oldFileName })\n{\n  const [newName, setNewName] = useState(\"\");\n  const [extension, setExtension] = useState(\"\");\n\n  useEffect(() => {\n    if (oldFileName) {\n      const filenameSplit = oldFileName.split('.');\n      const newName_ = filenameSplit[0];\n      const extension_ = filenameSplit.slice(1).join('.') || ''; \n\n      setNewName(newName_);\n      setExtension(extension_);\n      setNewFileName(newName_); \n",
      "suffix": "InputChange = (event) => {\n    setNewName(event.target.value);\n    setNewFileName(event.target.value);\n  };\n\n  const handleSave = () => {\n    const fullNewFileName = `${newName}.${extension}`;\n    onSave(fullNewFileName);\n  };\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <h2>Rename File</h2>\n        <input\n          className='nameInput'\n          type=\"text\"\n          value={newName}\n          onChange={handleInputChange}\n          placeholder=\"Enter new name (without extension)\"\n        />\n        <div className=\"modal-actions\">\n          <button className='cancelRenameDelButton' onClick={onClose}>Cancel</button>\n          <button className='renameDelButton' onClick={handleSave} disabled={!newName}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "real_middle": "    }\n  }, [oldFileName, setNewFileName]);\n\n  const handle",
      "generated_middle": "}\n  }, [oldFileName]);\n\n  const handle",
      "exact_match": false,
      "chrf": 68.77409568286504,
      "levenshtein_distance": 16
    }
  ]