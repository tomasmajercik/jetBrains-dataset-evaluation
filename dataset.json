[
    {
        "prefix": "import React, { useEffect, useRef, useState } from 'react';\nimport './redirect.css';\nimport { useNavigate } from 'react-router-dom';\n// imgs\nimport loadingGif from '../i",
        "middle": "mgs/loading.gif';\nimpor",
        "suffix": "t loadedGif from '../imgs/loaded.gif';\n//interface-s\n\nfunction Redirect()\n{\n  const navigate = useNavigate(); \n\n\n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const preventFromReturn = localStorage.getItem('preventFromReturn');\n    if (preventFromReturn == 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  //variables\n  const [loaded, setLoaded] = useState(false);\n\n  //functions\n\n    useEffect(() => \n    {\n        // Set a timeout\n        const timer = setTimeout(() => {\n            setLoaded(true); \n            const timer2 = setTimeout(() => {\n                navigate('/background');\n            }, 1800)\n        }, 3000);\n\n        // Cleanup the timer when the component is unmounted\n        return () => clearTimeout(timer);\n    }, []);\n  \n  //layout\n  return (\n      <>\n        {loaded ? (\n            <div className='main'>\n                <img className='biger' src={loadedGif} alt=\"\" />\n            </div>\n        ) : (\n            <div className='main'>\n                <img src={loadingGif} alt=\"\" />\n            </div>\n        )}\n      </>\n  );\n};\n\nexport default Redirect;"
    },
    {
        "prefix": "import React, { useEffect, useRef, useState } from 'react';\nimport './redirect.css';\nimport { useNavigate } from 'react-router-dom';\n// imgs\nimport loadingGif from '../imgs/loading.gif';\nimport loadedGif from '../imgs/loaded.gif';\n//interface-s\n\nfunction Redirect()\n{\n  const navigate = useNavigate(); \n\n\n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const preventFromReturn = localStorage.getItem('preventFromReturn');\n    if (preventFromReturn == 'true') \n    ",
        "middle": "{\n    ",
        "suffix": "  navigate(\"/\");\n    }\n  }, [navigate]);\n\n  //variables\n  const [loaded, setLoaded] = useState(false);\n\n  //functions\n\n    useEffect(() => \n    {\n        // Set a timeout\n        const timer = setTimeout(() => {\n            setLoaded(true); \n            const timer2 = setTimeout(() => {\n                navigate('/background');\n            }, 1800)\n        }, 3000);\n\n        // Cleanup the timer when the component is unmounted\n        return () => clearTimeout(timer);\n    }, []);\n  \n  //layout\n  return (\n      <>\n        {loaded ? (\n            <div className='main'>\n                <img className='biger' src={loadedGif} alt=\"\" />\n            </div>\n        ) : (\n            <div className='main'>\n                <img src={loadingGif} alt=\"\" />\n            </div>\n        )}\n      </>\n  );\n};\n\nexport default Redirect;"
    },
    {
        "prefix": "import React, { useEffect, useRef, useState } from 'react';\nimport './redirect.css';\nimport { useNavigate } from 'react-router-dom';\n// imgs\nimport loadingGif from '../imgs/loading.gif';\nimport loadedGif from '../imgs/loaded.gif';\n//interface-s\n\nfunction Redirect()\n{\n  const navigate = useNavigate(); \n\n\n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigat",
        "middle": "e(\"/\");\n    }\n  }, [n",
        "suffix": "avigate]);\n\n  useEffect(() => {\n    const preventFromReturn = localStorage.getItem('preventFromReturn');\n    if (preventFromReturn == 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  //variables\n  const [loaded, setLoaded] = useState(false);\n\n  //functions\n\n    useEffect(() => \n    {\n        // Set a timeout\n        const timer = setTimeout(() => {\n            setLoaded(true); \n            const timer2 = setTimeout(() => {\n                navigate('/background');\n            }, 1800)\n        }, 3000);\n\n        // Cleanup the timer when the component is unmounted\n        return () => clearTimeout(timer);\n    }, []);\n  \n  //layout\n  return (\n      <>\n        {loaded ? (\n            <div className='main'>\n                <img className='biger' src={loadedGif} alt=\"\" />\n            </div>\n        ) : (\n            <div className='main'>\n                <img src={loadingGif} alt=\"\" />\n            </div>\n        )}\n      </>\n  );\n};\n\nexport default Redirect;"
    },
    {
        "prefix": "import React, { useEffect, useRef, useState } from 'react';\nimport './redirect.css';\nimport { useNavigate } from 'react-router-dom';\n// imgs\nimport loadingGif from '../imgs/loading.gif';\nimport lo",
        "middle": "adedGif",
        "suffix": " from '../imgs/loaded.gif';\n//interface-s\n\nfunction Redirect()\n{\n  const navigate = useNavigate(); \n\n\n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const preventFromReturn = localStorage.getItem('preventFromReturn');\n    if (preventFromReturn == 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  //variables\n  const [loaded, setLoaded] = useState(false);\n\n  //functions\n\n    useEffect(() => \n    {\n        // Set a timeout\n        const timer = setTimeout(() => {\n            setLoaded(true); \n            const timer2 = setTimeout(() => {\n                navigate('/background');\n            }, 1800)\n        }, 3000);\n\n        // Cleanup the timer when the component is unmounted\n        return () => clearTimeout(timer);\n    }, []);\n  \n  //layout\n  return (\n      <>\n        {loaded ? (\n            <div className='main'>\n                <img className='biger' src={loadedGif} alt=\"\" />\n            </div>\n        ) : (\n            <div className='main'>\n                <img src={loadingGif} alt=\"\" />\n            </div>\n        )}\n      </>\n  );\n};\n\nexport default Redirect;"
    },
    {
        "prefix": "import React, { useEffect, useRef, useState } from 'react';\nimport './redirect.css';\nimport { useNavigate } from 'react-router-dom';\n// imgs\nimport loadingGif from '../imgs/loading.gif';\nimport loadedGif from '../imgs/loaded.gif';\n//interface-s\n\nfunction Redirect()\n{\n  const navigate = useNavigate(); \n\n\n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const preventFromReturn = localStorage.getItem('preventFromReturn');\n    if (preventFromReturn == 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  //variables\n  const [loaded, setLoaded] = useState(false);\n\n  //functions\n\n    useEffect(() => \n    {\n        // Set a timeout\n        const timer = setTimeout(() => {\n            setLoaded(true); \n            const timer2 = setTimeout(() => {\n                navigate('/background');\n            }, 1800)\n        }, 3000);\n\n        // Cleanup the timer when the component is unmounted\n        return () => clearTimeout(timer);\n    }, []);\n  \n  //layout\n  return (\n      <>\n        {loaded ? (\n            <div className='main'>\n                <img className='biger' src={loadedGif} alt=\"\" />\n            <",
        "middle": "/div>\n        ) : (",
        "suffix": "\n            <div className='main'>\n                <img src={loadingGif} alt=\"\" />\n            </div>\n        )}\n      </>\n  );\n};\n\nexport default Redirect;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './background.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => \n        a.name.localeCompare(b.name)\n      );\n      setChildrenList(sortedData);\n    });\n  \n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n  \n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const addPoint = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 1;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  const addPoints = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 2;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  \n\n  \n\n  // Layout\n  return (\n    <>\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        show",
        "middle": "Modal={showModal} \n        tog",
        "suffix": "gleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Stanovište</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n          \n\n\n      </div>\n\n\n      <h4 className='bckH4'>vyberte dieťa:</h4>\n\n      <div className='consoleTable'>\n        <table id='childrenTableAdmin'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Pridať</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td className='limiter'>{children.name}</td>\n                  <td>\n                    <button \n                      className='addBtn' \n                      onClick={() => addPoint(children)}\n                    >\n                      +1\n                    </button>\n                    <button \n                      className='addMoreBtn' \n                      onClick={() => addPoints(children)}\n                    >\n                      +2\n                    </button>\n                  </td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n\n\n      {/* <div className='childpool'>\n          {\n              childrenList.map((children) => (\n                  <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n              ))\n          }\n      </div> */}\n\n\n      {/* <button \n          className='changePointsButton' \n          type='submit'\n          onClick={handleSubmit}\n      >\n          Zmeniť!\n      </button> */}\n\n      {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './background.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => \n        a.name.localeCompare(b.name)\n      );\n      setChildrenList(sortedData);\n    });\n  \n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n  \n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const addPoint = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 1;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  const addPoints = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 2;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n   ",
        "middle": "     setPointsCount(0);\n ",
        "suffix": "     } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  \n\n  \n\n  // Layout\n  return (\n    <>\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Stanovište</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n          \n\n\n      </div>\n\n\n      <h4 className='bckH4'>vyberte dieťa:</h4>\n\n      <div className='consoleTable'>\n        <table id='childrenTableAdmin'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Pridať</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td className='limiter'>{children.name}</td>\n                  <td>\n                    <button \n                      className='addBtn' \n                      onClick={() => addPoint(children)}\n                    >\n                      +1\n                    </button>\n                    <button \n                      className='addMoreBtn' \n                      onClick={() => addPoints(children)}\n                    >\n                      +2\n                    </button>\n                  </td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n\n\n      {/* <div className='childpool'>\n          {\n              childrenList.map((children) => (\n                  <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n              ))\n          }\n      </div> */}\n\n\n      {/* <button \n          className='changePointsButton' \n          type='submit'\n          onClick={handleSubmit}\n      >\n          Zmeniť!\n      </button> */}\n\n      {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './background.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => \n        a.name.localeCompare(b.name)\n      );\n      setChildrenList(sortedData);\n    });\n  \n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n  \n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const addPoint = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 1;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  const addPoints = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 2;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  \n\n  \n\n  // Layout\n  return (\n    <>\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Stanovište</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n          \n\n\n      </div>\n\n\n      <h4 className='bckH4'>vyberte dieťa:</h4>\n\n      <div className='consoleTable'>\n        <table id='childrenTableAdmin'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Pridať</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td className='limiter'>{children.name}</td>\n                  <td>\n                    <button \n                      className='addBtn' \n                      onClick={() => addPoint(children)}\n                    >\n                      +1\n                    </button>\n                    <button \n                      className='addMoreBtn' \n                      onClick={() => addPoints(children)}\n                    >\n                      +2\n                    </button>\n                  </td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n\n\n      {/* <div className='childpool'>\n          {\n              childrenList.map((children) => (\n                  <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n              ))\n          }\n      </div> */}\n\n\n      {/* <button \n         ",
        "middle": " classN",
        "suffix": "ame='changePointsButton' \n          type='submit'\n          onClick={handleSubmit}\n      >\n          Zmeniť!\n      </button> */}\n\n      {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './background.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => \n        a.name.localeCompare(b.name)\n      );\n      setChildrenList(sortedData);\n    });\n  \n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n  \n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const addPoint = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 1;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  const addPoints = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 2;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  \n\n  \n\n  // Layout\n  return (\n    <>\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Stanovište</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n          \n\n\n      </div>\n\n\n      <h4 className='bckH4'>vyberte dieťa:</h4>\n\n      <div className='consoleTable'>\n        <table id='childrenTableAdmin'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Pridať</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td className='limiter'>{children.name}</td>\n                  <td>\n                    <button \n                      className='addBtn' \n                      onClick={() => addPoint(children)}\n                    >\n                      +1\n                    </button>\n                    <button \n                      className='addMoreBtn' \n                      onClick={() => addPoints(children)}\n                    >\n                      +2\n                    </button>\n                  </td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n\n\n      {/* <div className='childpool'>\n          {\n              childrenList.map((children) => (\n                  <button key={c",
        "middle": "hildren.id} cla",
        "suffix": "ssName='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n              ))\n          }\n      </div> */}\n\n\n      {/* <button \n          className='changePointsButton' \n          type='submit'\n          onClick={handleSubmit}\n      >\n          Zmeniť!\n      </button> */}\n\n      {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\ni",
        "middle": "mport './backgrou",
        "suffix": "nd.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => \n        a.name.localeCompare(b.name)\n      );\n      setChildrenList(sortedData);\n    });\n  \n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n  \n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const addPoint = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 1;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  const addPoints = async (child) => {\n    if (child && child.id) {\n      try {\n        const childDocRef = doc(database, \"score\", child.id);\n        const currentPoints = child.points;\n        const newPoints = currentPoints + 2;\n  \n        await updateDoc(childDocRef, { points: newPoints });\n  \n        setShowGif(true);\n        setTimeout(() => {\n          setShowGif(false);\n        }, 1800);\n  \n        setError(\"\");\n        setPointsCount(0);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n  };\n  \n  \n\n  \n\n  // Layout\n  return (\n    <>\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Stanovište</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n          \n\n\n      </div>\n\n\n      <h4 className='bckH4'>vyberte dieťa:</h4>\n\n      <div className='consoleTable'>\n        <table id='childrenTableAdmin'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Pridať</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td className='limiter'>{children.name}</td>\n                  <td>\n                    <button \n                      className='addBtn' \n                      onClick={() => addPoint(children)}\n                    >\n                      +1\n                    </button>\n                    <button \n                      className='addMoreBtn' \n                      onClick={() => addPoints(children)}\n                    >\n                      +2\n                    </button>\n                  </td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n\n\n      {/* <div className='childpool'>\n          {\n              childrenList.map((children) => (\n                  <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n              ))\n          }\n      </div> */}\n\n\n      {/* <button \n          className='changePointsButton' \n          type='submit'\n          onClick={handleSubmit}\n      >\n          Zmeniť!\n      </button> */}\n\n      {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './shop.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\nuseEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    });\n\n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  const handleSubmit = async () => {\n    if (selectedChild && selectedChild.id) {\n      try {\n        const childDocRef = doc(database, \"score\", selectedChild.id);\n        const currentPoints = selectedChild.points;\n\n        // Calculate new points based on operation\n        const newPoints = currentPoints - pointsCount;\n\n        if(newPoints < 0)\n        {\n          setError(\"Nedostatok bodov - nemožno dokončiť operáciu\")\n          return;\n        }\n\n        await updateDoc(childDocRef, {\n          points: newPoints\n        });\n\n\n        // alert('Points updated successfully!');\n        setShowGif(true);\n        setTimeout(() => {\n            setShowGif(false);\n        }, 1800);\n        setSelectedChild(null);\n        setError(\"\");\n        setPointsCount(0);\n\n\n        // Optional: Refresh the list\n        const updatedList = childrenList.map(child =>\n          child.id === selectedChild.id ? { ...child, points: newPoints } : child\n        );\n        setChildrenList(updatedList);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n\n  };\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  \n\n  // Layout\n  return (\n    <>\n    {showGif && \n        <div id='gif'>\n            <img id='giff' src={loadedGif}/>\n        </div>\n    }\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Obchod</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n        \n\n        <h4 className='bckH4'>vyberte cenu v ochode:</h4>\n        <div className='pointcountsArea'>\n            <input type=\"range\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n            <input type=\"number\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n        </div>\n\n\n      </div>\n        <h4 className='bckH4'>vyberte dieťa:</h4>\n        <div className='childpool'>\n            {\n                chi",
        "middle": "ldrenList.map((children) ",
        "suffix": "=> (\n                    <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n                ))\n            }\n        </div>\n        <button \n            className='changePointsButton' \n            type='submit'\n            onClick={handleSubmit}\n        >\n            Zmeniť!\n        </button>\n        {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './shop.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\nuseEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    });\n\n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  const handleSubmit = async () => {\n    if (selectedChild && selectedChild.id) {\n      try {\n        const childDocRef = doc(database, \"score\", selectedChild.id);\n        const currentPoints = selectedChild.points;\n\n        // Calculate new points based on operation\n        const newPoints = currentPoints - pointsCount;\n\n        if(newPoints < 0)\n        {\n          setError(\"Nedostatok bodov - nemožno d",
        "middle": "okončiť operáciu\")\n   ",
        "suffix": "       return;\n        }\n\n        await updateDoc(childDocRef, {\n          points: newPoints\n        });\n\n\n        // alert('Points updated successfully!');\n        setShowGif(true);\n        setTimeout(() => {\n            setShowGif(false);\n        }, 1800);\n        setSelectedChild(null);\n        setError(\"\");\n        setPointsCount(0);\n\n\n        // Optional: Refresh the list\n        const updatedList = childrenList.map(child =>\n          child.id === selectedChild.id ? { ...child, points: newPoints } : child\n        );\n        setChildrenList(updatedList);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n\n  };\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  \n\n  // Layout\n  return (\n    <>\n    {showGif && \n        <div id='gif'>\n            <img id='giff' src={loadedGif}/>\n        </div>\n    }\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Obchod</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n        \n\n        <h4 className='bckH4'>vyberte cenu v ochode:</h4>\n        <div className='pointcountsArea'>\n            <input type=\"range\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n            <input type=\"number\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n        </div>\n\n\n      </div>\n        <h4 className='bckH4'>vyberte dieťa:</h4>\n        <div className='childpool'>\n            {\n                childrenList.map((children) => (\n                    <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n                ))\n            }\n        </div>\n        <button \n            className='changePointsButton' \n            type='submit'\n            onClick={handleSubmit}\n        >\n            Zmeniť!\n        </button>\n        {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './shop.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\nuseEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    });\n\n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  const handleSubmit = async () => {\n    if (selectedChild && selectedChild.id) {\n      try {\n        const childDocRef = doc(database, \"score\", selectedChild.id);\n        const currentPoints = selectedChild.points;\n\n        // Calculate new points based on operation\n        const newPoints = currentPoints - pointsCount;\n\n        if(newPoints < 0)\n        {\n          setError(\"Nedostatok bodov - nemožno dokončiť operáciu\")\n          return;\n        }\n\n        await updateDoc(childDocRef, {\n          points: newPoints\n        });\n\n\n        // alert('Points updated successfully!');\n        setShowGif(true);\n        setTimeout(() => {\n            setShowGif(false);\n        }, 1800);\n        setSelectedChild(null);\n        setError(\"\");\n        setPointsCount(0);\n\n\n        // Optional: Refresh the list\n        const updatedList = childrenList.map(child =>\n          child.id === selectedChild.id ? { ...child, points: newPoints } : child\n        );\n        setChildrenList(updatedList);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n\n  };\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  \n\n  // Layout\n  return (\n    <>\n    {showGif && \n        <div id='gif'>\n            <img id='giff' src={loadedGif}/>\n        </div>\n    }\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Obchod</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n        \n\n        <h4 className='bckH4'>vyberte cenu v ochode:</h4>\n        <div className='pointcountsArea'>\n            <input type=\"range\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n            <input type=\"number\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => se",
        "middle": "tPointsCount(par",
        "suffix": "seInt(e.target.value, 10))}/>\n        </div>\n\n\n      </div>\n        <h4 className='bckH4'>vyberte dieťa:</h4>\n        <div className='childpool'>\n            {\n                childrenList.map((children) => (\n                    <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n                ))\n            }\n        </div>\n        <button \n            className='changePointsButton' \n            type='submit'\n            onClick={handleSubmit}\n        >\n            Zmeniť!\n        </button>\n        {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './shop.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\nuseEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    });\n\n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  const handleSubmit = async () => {\n    if (selectedChild && selectedChild.id) {\n      try {\n        const childDocRef = doc(database, \"score\", selectedChild.id);\n        const currentPoints = selectedChild.points;\n\n        // Calculate new points based on operation\n        const newPoints = currentPoints - pointsCount;\n\n        if(newPoints < 0)\n        {\n          setError(\"Nedostatok bodov - nemožno dokončiť operáciu\")\n          return;\n        }\n\n        await updateDoc(childDocRef, {\n          points: newPoints\n        });\n\n\n        // alert('Points updated successfully!');\n        setShowGif(true);\n        setTimeout(() => {\n            setShowGif(false);\n        }, 1800);\n        setSelectedChild(null);\n        setError(\"\");\n        setPointsCount(0);\n\n\n        // Optional: Refresh the list\n        const updatedList = childrenList.map(child =>\n          child.id === selectedChild.id ? { ...child, points: newPoints } : child\n        );\n        setChildrenList(updatedList);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n\n  };\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  \n\n  // Layout\n  return (\n    <>\n    {showGif && \n        <div id='gif'>\n            <img id='giff' src={loadedGif}/>\n        </div>\n    }\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Obchod</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n        \n\n        <h4 className='bckH4'>vyberte cenu v ochode:</h4>\n        <div className='pointcountsArea'>\n            <input type=\"range\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n            <input type=\"number\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n        </div>\n\n\n      </div>\n  ",
        "middle": "      <h4 class",
        "suffix": "Name='bckH4'>vyberte dieťa:</h4>\n        <div className='childpool'>\n            {\n                childrenList.map((children) => (\n                    <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n                ))\n            }\n        </div>\n        <button \n            className='changePointsButton' \n            type='submit'\n            onClick={handleSubmit}\n        >\n            Zmeniť!\n        </button>\n        {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import { useEffect, useState, useRef } from 'react';\nimport './shop.css';\nimport { database } from '../config/firebaseConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, onSnapshot } from 'firebase/firestore';\n\nimport AddPlayer from '../components/addPlayer';\n\n//imgs\nimport loadedGif from '../imgs/loaded.gif';\nimport childrenBackground from '../imgs/childrenBackground.jpg';\n\n\nfunction Background() \n{\n  // Variables\n  localStorage.setItem('preventFromReturn', 'true');\n  const [childrenList, setChildrenList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [operation, setOperation] = useState('add');\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [showGif, setShowGif] = useState(false);\n\n  const [selectedChild, setSelectedChild] = useState(null);\n  const [pointsCount, setPointsCount] = useState(0);\n\n  const navigate = useNavigate();\n  // Functions\n  \n  useEffect(() => {\n    const autentif = localStorage.getItem('autentif');\n    if (autentif !== 'true') \n    {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n\nuseEffect(() => {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => {\n      const childrenData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      const sortedData = childrenData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    });\n\n    return () => unsubscribe(); // Cleanup listener on component unmount\n  }, []);\n\n  const selectBtnClick = (child) =>\n  {\n    setSelectedChild(child);\n  }\n\n  const handleSubmit = async () => {\n    if (selectedChild && selectedChild.id) {\n      try {\n        const childDocRef = doc(database, \"score\", selectedChild.id);\n        const currentPoints = selectedChild.points;\n\n        // Calculate new points based on operation\n        const newPoints = currentPoints - pointsCount;\n\n        if(newPoints < 0)\n        {\n          setError(\"Nedostatok bodov - nemožno dokončiť operáciu\")\n          return;\n        }\n\n        await updateDoc(childDocRef, {\n          points: newPoints\n        });\n\n\n        // alert('Points updated successfully!');\n        setShowGif(true);\n        setTimeout(() => {\n            setShowGif(false);\n        }, 1800);\n        setSelectedChild(null);\n        setError(\"\");\n        setPointsCount(0);\n\n\n        // Optional: Refresh the list\n        const updatedList = childrenList.map(child =>\n          child.id === selectedChild.id ? { ...child, points: newPoints } : child\n        );\n        setChildrenList(updatedList);\n      } catch (err) {\n        setError(\"Failed to update points.\");\n        console.error(err);\n      }\n    } else {\n      setError(\"Žiadne dieťa nebolo vybrané.\");\n    }\n\n  };\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  \n\n",
        "middle": "  // Layout\n  ",
        "suffix": "return (\n    <>\n    {showGif && \n        <div id='gif'>\n            <img id='giff' src={loadedGif}/>\n        </div>\n    }\n\n    <button className='addPlayer' onClick={toggleModal}>+</button>\n\n    <AddPlayer \n        showModal={showModal} \n        toggleModal={toggleModal} \n    />\n      \n    \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='bckH1'>Obchod</h1>\n      </div>\n    \n      <div className='PointsContainer'>\n        \n\n        <h4 className='bckH4'>vyberte cenu v ochode:</h4>\n        <div className='pointcountsArea'>\n            <input type=\"range\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n            <input type=\"number\" min=\"0\" max=\"80\" value={pointsCount} onChange={(e) => setPointsCount(parseInt(e.target.value, 10))}/>\n        </div>\n\n\n      </div>\n        <h4 className='bckH4'>vyberte dieťa:</h4>\n        <div className='childpool'>\n            {\n                childrenList.map((children) => (\n                    <button key={children.id} className='selectBtn' onClick={() => selectBtnClick(children)}>{children.name} : {children.points}</button>\n                ))\n            }\n        </div>\n        <button \n            className='changePointsButton' \n            type='submit'\n            onClick={handleSubmit}\n        >\n            Zmeniť!\n        </button>\n        {error && <p className='error'>{error}</p>}\n    </>\n  );\n}\n\nexport default Background;"
    },
    {
        "prefix": "import React, { useState } from 'react';\nimport './addPlayer.css';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { database } from '../config/firebaseConfig'; // Assum",
        "middle": "ing you have a fireba",
        "suffix": "seConfig.js where you initialize Firebase\n\n\nfunction AddPlayer({ showModal, toggleModal }) \n{\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const handleAddPlayer = async () => \n  {\n    if (newPlayerName) \n    {\n      try \n      {\n        await addDoc(collection(database, 'score'), \n        {\n          name: newPlayerName,\n          points: 0,\n        });\n  \n        setNewPlayerName(\"\");\n        toggleModal();\n      } \n      catch (error) \n      {\n        console.error(\"Error adding player: \", error);\n      }\n    }\n  };\n  \n\n  if (!showModal) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2 className='addH2'>Pridať hráča:</h2>\n        <input\n          className='addInput'\n          type=\"text\"\n          value={newPlayerName}\n          onChange={(e) => setNewPlayerName(e.target.value)}\n          placeholder=\"Zadajte meno nového hráča\"\n        />\n        <br/>\n        <button className='addbtn' onClick={handleAddPlayer}>Pridať</button>\n        <br/>\n        <button className='addbtn2' onClick={toggleModal}>Zrušiť</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPlayer;\n"
    },
    {
        "prefix": "import React, { useState } from 'react';\nimport './addPlayer.css';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { database } from '../config/firebaseConfig'; // Assuming you have a firebaseConfig.js where you initialize Firebase\n\n\nfunction AddPlayer({ showModal, toggleModal }) \n{\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const handleAddPlayer = async () => \n  {\n    if (newPlayerName) \n    {\n      try \n      {\n        await addDoc(collection(database, 'score'), \n        {\n          name: newPlayerName,\n          points: 0,\n        });\n  \n        setNewPlayerName(\"\");\n        toggleModal();\n      } \n      catch (error) \n      {\n        console.error(\"Error adding player: \", error);\n      }\n    }\n  };\n  \n\n  if (!showModal) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2 className='addH2'>Pridať hráča:</h2>\n        <input\n          className='addInput'\n          type=\"text\"\n          value={newPlayerName}\n          onChange={(e) => setNewPlayerName(e.target.value)}\n          placeholder=\"Zadajte meno nového hráča\"\n        />\n        <br/>\n        <button className='addb",
        "middle": "tn' onClick={handle",
        "suffix": "AddPlayer}>Pridať</button>\n        <br/>\n        <button className='addbtn2' onClick={toggleModal}>Zrušiť</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPlayer;\n"
    },
    {
        "prefix": "import React, { useState } from '",
        "middle": "react';\nimport './addPla",
        "suffix": "yer.css';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { database } from '../config/firebaseConfig'; // Assuming you have a firebaseConfig.js where you initialize Firebase\n\n\nfunction AddPlayer({ showModal, toggleModal }) \n{\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const handleAddPlayer = async () => \n  {\n    if (newPlayerName) \n    {\n      try \n      {\n        await addDoc(collection(database, 'score'), \n        {\n          name: newPlayerName,\n          points: 0,\n        });\n  \n        setNewPlayerName(\"\");\n        toggleModal();\n      } \n      catch (error) \n      {\n        console.error(\"Error adding player: \", error);\n      }\n    }\n  };\n  \n\n  if (!showModal) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2 className='addH2'>Pridať hráča:</h2>\n        <input\n          className='addInput'\n          type=\"text\"\n          value={newPlayerName}\n          onChange={(e) => setNewPlayerName(e.target.value)}\n          placeholder=\"Zadajte meno nového hráča\"\n        />\n        <br/>\n        <button className='addbtn' onClick={handleAddPlayer}>Pridať</button>\n        <br/>\n        <button className='addbtn2' onClick={toggleModal}>Zrušiť</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPlayer;\n"
    },
    {
        "prefix": "import React, { useState } from 'react';\nimport './addPlayer.css';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { database } from '../config/firebaseConfig'; // Assuming you have a firebaseConfig.js where you initialize Firebase\n\n\nfunction AddPlayer({ showModal, toggleModal }) \n{\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const handleAddPlayer = async () => \n  {\n    if (newPlayerName) \n    {\n      try \n      {\n        await addDoc(collection(database, 'score'), \n        {\n          name: newPlayerName,\n          points: 0,\n        });\n  \n        setNewPlayerName(\"\");\n        toggleModal();\n      } \n      catch (error) \n      {\n        console.error(\"Error adding player: \", error);\n      }\n    }\n  };\n  \n\n  if (!showModal) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2 className='addH2'>Pridať hráča:</h2>\n        <input\n          className='addInput'\n          type=\"text\"\n          value={newPlayerName}\n          onChange={(e) => setNewPlayerName(e.target.value)}\n          placeholder=\"Zadajte meno nového hráča\"\n        />\n        <br/>\n        <button className='addbtn' onClick={handleAddPlayer}>Pridať</button>\n        <br/>\n        <button className='addbtn2' on",
        "middle": "Click={toggleModal}>Zrušiť",
        "suffix": "</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPlayer;\n"
    },
    {
        "prefix": "import React, { useState } from 'react';\nimport './addPlayer.css';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { database } from '../config/firebaseConfig'; // Assuming you have a firebaseConfig.js where you initialize Firebase\n\n\nfunction AddPlayer({ showModal, toggleModal }) \n{\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n\n  const handleAddPlayer = async () => \n  {\n    if (newPlayerName) \n    {\n      try \n      {\n        await addDoc(collection(database, 'score'), \n        {\n          name: newPlayerName,\n          points: 0,\n        });\n  \n        setNewPlayerName(\"\");\n        toggleModal();\n      } \n      catch (error) \n      {\n        console.error(\"Error adding player: \", error);\n      }\n    }\n  };\n  \n\n  if (!showModal) return null;\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2 className='addH2'>Pridať hráča:</h2>\n        <input\n          className='addInput'\n          type=\"text\"\n          value={newPlayerName}\n          onChange={(e) => setNewPlayerName(e.target.value)}\n          placeholder=\"Zadajte meno nového hráča\"\n        />\n        <br/>\n",
        "middle": "        <butto",
        "suffix": "n className='addbtn' onClick={handleAddPlayer}>Pridať</button>\n        <br/>\n        <button className='addbtn2' onClick={toggleModal}>Zrušiť</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPlayer;\n"
    },
    {
        "prefix": "import { useEffect, useState } from 'react';\nimport './App.css';\nimport { database } from './config/firebaseConfig';\nimport { collection, getDocs, onSnapshot} from 'firebase/firestore';\n\n//imgs\nimport childrenBackground from './imgs/childrenBackground.jpg';\n\n\nfunction App() \n{\n\n  //variables \n  const [childrenList, setChildrenList] = useState([]);\n\n  useEffect(() => \n  {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => \n    {\n      // Filter and sort data from snapshot\n      const filteredData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n\n      const sortedData = filteredData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    \n    }, \n    (err) => \n    {\n      console.error(\"Failed to fetch data: \", err);\n    });\n    localStorage.setItem('autentif', false);\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <>\n      \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n ",
        "middle": "         ba",
        "suffix": "ckgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='titleH1'>Bodka za prázdninami 2024</h1>\n      </div>\n\n      <div className='consoleTable'>\n        <table id='childrenTable'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td>{children.name}</td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n"
    },
    {
        "prefix": "import { useEffect, useState } from 'react';\nimport './App.css';\nim",
        "middle": "port { database } f",
        "suffix": "rom './config/firebaseConfig';\nimport { collection, getDocs, onSnapshot} from 'firebase/firestore';\n\n//imgs\nimport childrenBackground from './imgs/childrenBackground.jpg';\n\n\nfunction App() \n{\n\n  //variables \n  const [childrenList, setChildrenList] = useState([]);\n\n  useEffect(() => \n  {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => \n    {\n      // Filter and sort data from snapshot\n      const filteredData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n\n      const sortedData = filteredData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    \n    }, \n    (err) => \n    {\n      console.error(\"Failed to fetch data: \", err);\n    });\n    localStorage.setItem('autentif', false);\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <>\n      \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='titleH1'>Bodka za prázdninami 2024</h1>\n      </div>\n\n      <div className='consoleTable'>\n        <table id='childrenTable'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td>{children.name}</td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n"
    },
    {
        "prefix": "import { useEffect, useState } from 'react';\nimport './App.css';\nimport { database } from './config/firebaseConfig';\nimport { collection, getDocs, onSnapshot} from 'firebase/firestore';\n\n//imgs\nimport childrenBackground from './imgs/childrenBackground.jpg';\n\n\nfunction App() \n{\n\n  //variables \n  const [childrenList, setChildrenList] = useState([]);\n\n  useEffect(() => \n  {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => \n    {\n      // Filter and sort data from snapshot\n      const filteredData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n\n      const sortedData = filteredData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    \n    }, \n    (err) => \n    {\n      console.error(\"Failed to fetch data: \", err);\n    });\n    localStorage.setItem('autentif', false);\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <>\n      \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='titleH1'>Bodka za prázdninami 2024</h1>\n      </div>\n\n      <div className='consoleTable'>\n        <table id='childrenTable'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td>{children.nam",
        "middle": "e}</td>\n          ",
        "suffix": "        <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n"
    },
    {
        "prefix": "import { useEffect, useState } from 'react';\nimport './App.css';\nimport { database } from './config/firebaseConfig';\nimport { collection, getDocs, onSnapshot} from 'firebase/firestore';\n\n//imgs\nimport childrenBackground from './imgs/childrenBackground.jpg';\n\n\nfunction App() \n{\n\n  //variables \n  const [childrenList, setChildrenList] = useState([]);\n\n  useEffect(() => \n  {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => \n    {\n      // Filter and sort data from snapshot\n      const filteredData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n\n      const sortedData = filteredData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    \n    }, \n    (err) => \n    {\n      console.error(\"Failed to fetch data: \", err);\n    });\n    localStorage.setItem('autentif', false);\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <>\n      \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n    ",
        "middle": "      co",
        "suffix": "lor: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='titleH1'>Bodka za prázdninami 2024</h1>\n      </div>\n\n      <div className='consoleTable'>\n        <table id='childrenTable'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td>{children.name}</td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n"
    },
    {
        "prefix": "import { useEffect, useState } from 'react';\nimport './App.css';\nimport { database } from './config/firebaseConfig';\nimport {",
        "middle": " collection, getDocs, onS",
        "suffix": "napshot} from 'firebase/firestore';\n\n//imgs\nimport childrenBackground from './imgs/childrenBackground.jpg';\n\n\nfunction App() \n{\n\n  //variables \n  const [childrenList, setChildrenList] = useState([]);\n\n  useEffect(() => \n  {\n    const unsubscribe = onSnapshot(collection(database, \"score\"), (snapshot) => \n    {\n      // Filter and sort data from snapshot\n      const filteredData = snapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n\n      const sortedData = filteredData.sort((a, b) => b.points - a.points);\n      setChildrenList(sortedData);\n    \n    }, \n    (err) => \n    {\n      console.error(\"Failed to fetch data: \", err);\n    });\n    localStorage.setItem('autentif', false);\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <>\n      \n      <div \n        className='title' \n        style={{\n          backgroundImage: `url(${childrenBackground})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          color: 'white',\n          textAlign: 'center'\n        }}\n      >\n        <h1 className='titleH1'>Bodka za prázdninami 2024</h1>\n      </div>\n\n      <div className='consoleTable'>\n        <table id='childrenTable'>\n          <thead>\n            <tr>\n              <th>Meno hráča</th>\n              <th>Počet bodov</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              childrenList.map((children) => (\n                <tr key={children.id}>\n                  <td>{children.name}</td>\n                  <td>{children.points}</td>\n                </tr>                \n              ))\n            }\n          </tbody>\n        </table>\n        \n      </div>\n    </>\n  );\n}\n\nexport default App;\n"
    }
]